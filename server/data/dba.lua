---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Anybook.
--- DateTime: 2022/5/17 11:25
---
local cjson = require("cjson")
local dbHandler = require "dbhandler"

local dba = {}

function dba:init()
    local dbUrl = Server.CurServer:getDataServiceURL()
    local dbSecondUrl = Server.CurServer:getDataServiceSecondURL()
    self.gameId = World.GameName
    self.enable = dbUrl ~= "" and not World.IsLibServer
    if not self.enable then
        return
    end
    if dbUrl:sub(1, 6) == "local:" then
        self.locality = true
        return
    end
    self.dbUrl = dbUrl .. "/api/v2/game/ext/data"
    if dbUrl ~= dbSecondUrl and dbSecondUrl ~= "" then
        self.dbSecondUrl = dbSecondUrl .. "/api/v2/game/ext/data"
    end
end

function dba:sendDBHttpRequest(method, url, params, body, callback, tryTimes)
    if tryTimes >= 3 then
        if url == self.dbUrl and self.dbSecondUrl then
            self:sendDBHttpRequest(method, self.dbSecondUrl, params, body, callback, 1)
        else
            -- 数据请求不成功提示
            Lib.logError("dba Http Request failed. url:", url, "params:", Lib.pv(params))
            if callback then
                callback({ }, false)
            end
        end
        return
    end
    AsyncProcess.HttpRequest(method, url, params, function(response)
        if response.status_code then
            self:sendDBHttpRequest(method, url, params, body, callback, tryTimes + 1)
            return
        end
        if callback then
            callback(response, true)
        end
    end, body)
end

function dba:getData(partitionKey, key, callback)
    callback = callback or function()
    end
    if self.locality then
        dbHandler:getDataByUserId(partitionKey, key, function(_, data)
            callback(data ~= "" and cjson.decode(data)[1] or nil)
        end)
        return
    end
    local params = {
        { "partitionKey", partitionKey },
        { "gameId", self.gameId },
        { "subKey", key }
    }
    self:sendDBHttpRequest("GET", self.dbUrl, params, nil, function(response, isSuccess)
        if not isSuccess then
            callback()
            return
        end
        local code = response.code
        if code ~= 1 then
            callback()
        else
            local data = response.data.data
            callback(data and cjson.decode(data)[1] or nil)
        end
    end, 1)
end

function dba:setData(partitionKey, key, data)
    local ok, ret = pcall(cjson.encode, { data })
    if not ok then
        Lib.logError(ret, Lib.pv(data))
        return false
    end
    if self.locality then
        dbHandler:setData(partitionKey, key, ret, true)
        return
    end
    local params = { { "gameId", self.gameId } }
    local body = cjson.encode({ [1] = { partitionKey = partitionKey, subKey = key, gameId = self.gameId, data = ret } })
    self:sendDBHttpRequest("POST", self.dbUrl, params, body, function(response, isSuccess)
        if not isSuccess then
            Lib.logError("SetData Fail!", Lib.pv(response))
        end
    end, 1)
end

function dba:removeData(partitionKey, key)
    if self.locality then
        dbHandler:setData(partitionKey, key, nil)
    else
        self:setData(partitionKey, key, nil)
    end
end

RETURN(dba)