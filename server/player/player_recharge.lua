---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2020/1/14 0014 14:30
---

---获取玩家的充值金额
local function getPlayerRechargeAmount(userId, callback)
    AsyncProcess.GetSumRechargeGCube(userId, function(gcube)
        if type(gcube) ~= "number" then
            return
        end
        local player = Game.GetPlayerByUserId(userId)
        if not player then
            return
        end
        local packet = {
            pid = "SumRechargeGCube",
            gcube = gcube
        }
        player:sendPacket(packet)
        if callback then
            callback(gcube)
        end
    end)
end

---玩家充值了金魔方
function Player:onRechargeGCube(productId)
    local sumRechargeData = self:data("rechargeData")["sumRecharge"]
    if not sumRechargeData then
        return
    end
    if Player.getSumRecharge(sumRechargeData.currentId) then
        getPlayerRechargeAmount(self.platformUserId)
    end
end

function Player:initRecharge()
    local mainData = self:data("main")
    local config = Player.getMinGCubeConfig(mainData.sex)
    if not config then
        return ---没有充值活动
    end
    local sumRechargeData = self:data("rechargeData")["sumRecharge"]
    if not sumRechargeData then
        sumRechargeData = { remindDay = 0, currentId = config.id }
        self:data("rechargeData")["sumRecharge"] = sumRechargeData
    end
    if sumRechargeData.currentId == nil then
        sumRechargeData.currentId = config.id
        sumRechargeData.remindDay = 0
    end
    local packet = {
        pid = "ShowSumRecharge",
        id = sumRechargeData.currentId,
        remind = false
    }
    local dayKey = Lib.getYearDayStr(os.time())
    if dayKey ~= sumRechargeData.remindDay and config.dailyRemind then
        ---需要每日提醒
        packet.remind = true
        sumRechargeData.remindDay = dayKey
    end
    self:sendPacket(packet)
    if Player.getSumRecharge(sumRechargeData.currentId) then
        getPlayerRechargeAmount(self.platformUserId)
    end
end

function Player:onSumRechargeReceive()
    local sumRechargeData = self:data("rechargeData")["sumRecharge"]
    if not sumRechargeData then
        return
    end
    local current = Player.getSumRecharge(sumRechargeData.currentId)
    if not current then
        return
    end
    getPlayerRechargeAmount(self.platformUserId, function(gcube)
        if current.id ~= sumRechargeData.currentId then
            return ---防止弱网环境重复点击领取能够重复领取奖励
        end
        if gcube >= current.gcube then
            for _, reward in pairs(current.rewards) do
                if not self:reward({ reward = reward.reward, cfg = Player.SumRechargeConfig, check = true }) then
                    self:sendTip(1, "sum.recharge.inventory.full", 40)
                    return
                end
            end
            for _, reward in pairs(current.rewards) do
                self:reward({ reward = reward.reward, cfg = Player.SumRechargeConfig, check = false })
            end
            local context = {obj1 = self, awardShow = true}
            Trigger.CheckTriggers(self:cfg(), "RECEIVE_RECHARGE_REWARD", context)
            local packet
            if context.awardShow then
                packet = {
                    pid = "SumRechargeResult",
                    id = sumRechargeData.currentId
                }
                self:sendPacket(packet)
            end
            if not current.nextId or not Player.getSumRecharge(current.nextId) then
                Trigger.CheckTriggers(self:cfg(), "SUM_RECHARGE_OVER", {obj1 = self})
            end
            sumRechargeData.currentId = current.nextId
            sumRechargeData.remindDay = 0
            packet = {
                pid = "ShowSumRecharge",
                id = sumRechargeData.currentId,
                remind = false
            }
            self:sendPacket(packet)
        end
    end)
end

function Player:showRecharge(show)
    local mainData = self:data("main")
    local config = Player.getMinGCubeConfig(mainData.sex)
    if not config then
        return
    end
    local sumRechargeData = self:data("rechargeData")["sumRecharge"]
    if not sumRechargeData then
        return
    end
    if not sumRechargeData.currentId then
        return
    end
    local packet = {
        pid = "ShowSumRecharge",
        id = sumRechargeData.currentId,
        remind = show
    }
    self:sendPacket(packet)
end