---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/4/9 11:05
---
---
local SkillBase = Skill.GetType("Base")
local Reload = Skill.GetType("Reload")
local reloadType = {}

local setting = require "common.setting"

Reload.reloadType = "Item"

--重装容器
function Reload:reload(packet, from)
    from:data("reload").reloadTimer = from:timer(self.reloadTime or 20, self.finishReload, self, packet, from)
end

--尝试判断重装条件
function Reload:tryReload(packet, from)
    local currentCapacity, containerCfg = self:getContainerVar(from)
    if not currentCapacity then
        return false
    end
    if currentCapacity == containerCfg.maxCapacity then
        return false
    end
    packet.canAddCapacity = containerCfg.maxCapacity - currentCapacity
    local type = containerCfg.reloadType or self.reloadType
    local func = assert(reloadType[type], type)
    local ret, addCapacity = func(self, packet, from, true)
    if not ret then
        return false
    end
    packet.addCapacity = addCapacity or packet.canAddCapacity
    return true
end

--完成重装容量
function Reload:finishReload(packet, from)
    local currentCapacity, containerCfg = self:getContainerVar(from)
    if not currentCapacity then
        return
    end
    self:cancel(packet, from)
    local type = containerCfg.reloadType or self.reloadType
    local func = assert(reloadType[type], type)
    local ret, addCapacity = func(self, packet, from)
    if not ret then
        return false
    end
    currentCapacity = currentCapacity + (addCapacity or packet.addCapacity)
    self:setCurrentCapacity(from, currentCapacity)
    SkillBase.cast(self, packet, from)
end

--取消重装（目前只用于重装容量）
function Reload:cancel(packet, from)
    local containerData = from:data("reload")
    if containerData.reloadTimer then
        containerData.reloadTimer()
        containerData.reloadTimer = nil
    end
end

function Reload:canCast(packet, from)
    if not SkillBase.canCast(self, packet, from) then
        return false
    end
    local method = packet.method
    if method == "Cancel" then
        return true
    end
    if from:data("reload").reloadTimer then
        return false
    end
    if not self:tryReload(packet, from) then
        return false
    end
    return true
end

function Reload:cast(packet, from)
    local method = packet.method
    if method == "Cancel" then
        self:cancel(packet, from)
    else
        self:reload(packet, from)
    end
end

function reloadType:Item(packet, from, check)
    local _, containerCfg = self:getContainerVar(from)
    local reloadName = containerCfg.reloadName or self.reloadName
    local reloadBlock = containerCfg.reloadBlock or self.reloadBlock
    local ret, realSub = from:tray():remove_item(reloadName, packet.canAddCapacity, check, true, reloadName == "/block" and function(item)
        return item:block_id() == setting:name2id("block", reloadBlock)
    end, "skill_reload")
    return ret, realSub
end

function reloadType:Custom(packet, from)
    --todo
    return true
end