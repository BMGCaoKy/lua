---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/6/5 11:20
---

ReportManager = {}
ReportManager.RankType = { Inc = 0, Max = 1 } --app排行榜类型  inc 递增  max 上报最大值 (integral)
local GameRankType = ReportManager.RankType.Inc
local WaitReportCache = {}
local EnterReportCache = {}
local LastReportEnterTime = os.time()
local RoundIdReportLock = {}
local gameName = World.GameName

function ReportManager:setRankType(RankType)
    self.GameRankType = RankType or ReportManager.RankType.Inc
end

function ReportManager:clearRoundIdLock()
    RoundIdReportLock = {}
end

function ReportManager:onPlayerLogout(player)
    local time = os.time() - (player:data("main").inGameTime or os.time())
    ReportManager:reportUserTime(player.platformUserId, time)
    local appIntegral = player:data("main").appIntegral or 0
    if appIntegral > 0 then
        ReportManager:reportUserIntegral(player.platformUserId, appIntegral)
    end
    player:data("main").appIntegral = 0
end

function ReportManager:getUserReportCache(userId)
    userId = tonumber(tostring(userId))
    for _, cache in pairs(WaitReportCache) do
        if cache.userId == userId then
            return cache
        end
    end
    local player = Game.GetPlayerByUserId(userId)
    if not player then
        player = {}
    end

    local cache = {
        userId = userId,
        appVersion = player.clientInfo and player.clientInfo.version_code or 0,
        packageName = player.clientInfo and player.clientInfo.package_name or 0,
        gameId = gameName,
        kill = 0,
        rank = 0,
        meanTime = 0,
        integral = 0,
        type = 0
    }
    local roundIdKey = tostring(userId) .. "-" .. AsyncProcess._gameId
    if not RoundIdReportLock[roundIdKey] then
        cache.roundId = AsyncProcess._gameId
        RoundIdReportLock[roundIdKey] = true
    end
    table.insert(WaitReportCache, cache)
    return cache
end

function ReportManager:getUserEnterCache(userId, clientInfo)
    userId = tonumber(tostring(userId))

    for _, cache in pairs(EnterReportCache) do
        if cache.userId == userId then
            return cache
        end
    end
    local cache = {
        userId = userId,
        appVersion = clientInfo and clientInfo.version_code or 0,
        packageName = clientInfo and clientInfo.package_name or 0,
        gameId = gameName,
        kill = 0,
        rank = 0,
        meanTime = 0,
        integral = 0,
        type = 0
    }
    table.insert(EnterReportCache, cache)
    return cache
end

---@param userId number player userId
---@param kills number The number of player kills in the game
---@param rank number Player rank in the game
---@param isCount number Whether to complete a whole game
function ReportManager:reportUserData(userId, kills, rank, isCount)
    kills = kills or 0
    rank = rank or 0
    isCount = isCount or 0
    if kills > 0 then
        ReportManager:reportUserKill(userId, kills)
    end
    if rank > 0 then
        ReportManager:reportUserRank(userId, rank)
    end
    if isCount > 0 then
        ReportManager:reportUserCount(userId)
    end
end

function ReportManager:reportUserKill(userId, kill)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.kill = cache.kill + (kill or 0)
end

function ReportManager:reportUserTime(userId, time)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.meanTime = cache.meanTime + (time or 0)
end

function ReportManager:reportUserRank(userId, rank)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.rank = rank or 0
end

function ReportManager:reportUserCount(userId)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.isCount = 0
end

function ReportManager:reportUserWin(userId)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.isWin = 1
end

function ReportManager:reportUserEnter(userId, clientInfo)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserEnterCache(userId, clientInfo)
    cache.isEnter = 0
end

function ReportManager:reportUserIntegral(userId, integral)
    if Game.IsCloseServer() then
        return
    end
    local cache = ReportManager:getUserReportCache(userId)
    cache.integral = cache.integral + (integral or 0)
    cache.type = GameRankType
end

function ReportManager:tryReportGameData()
    self:tryReportEnterData()
    if #WaitReportCache == 0 then
        return true
    end
    AsyncProcess.ReportList(function(data)
    end, WaitReportCache)
    WaitReportCache = {}
    return true
end

function ReportManager:tryReportEnterData()
    if #EnterReportCache == 0 then
        return
    end
    local report = function()
        AsyncProcess.ReportList(function(data)
        end, EnterReportCache)
        EnterReportCache = {}
        LastReportEnterTime = os.time()
    end
    if Game.IsCloseServer() then
        report()
    end
    if #WaitReportCache >= 5 then
        report()
    end
    if os.time() - LastReportEnterTime >= 30 then
        report()
    end
end