---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/5/7 16:10
---
local widget_base = require "ui.widget.widget_base"
---@class widget_adapter_view : widget_base
local M = Lib.derive(widget_base)

function M:init(type, name)
    widget_base.init(self, nil, type, name)
    self:root():SetArea({ 0, 0 }, { 0, 0 }, { 1, 0 }, { 1, 0 })
    self.adapter = nil
end

---@param adapter adapter_base
function M:setAdapter(adapter)
    self.adapter = adapter
    self.adapter:setView(self)
    self:root():EnableVirtualList() ---设置使用虚拟列表模式
end

function M:getAdapter()
    return self.adapter
end

function M:getItem(key, value)
    local count = self:CHILD_COUNT()
    for index = 1, count do
        local tab = self:GET_LUA_ITEM(index - 1)
        if tab and tab[key] == value then
            return tab, index - 1
        end
    end
    return nil, -1
end

function M:AREA(xPos, yPos, width, height)
    self:root():SetArea(xPos or { 0, 0 }, yPos or { 0, 0 }, width or { 1, 0 }, height or { 1, 0 })
end

function M:MOVE_ABLE(move)
    self:root():SetMoveAble(move == nil or move and true)
end

function M:TOUCHABLE(touchable)
    self:root():SetTouchable(touchable)
    self:root():getContainerWindow():SetTouchable(touchable)
end

---@return GUIWindow
function M:GET_ITEM(index)
    return self:root():GetItem(index)
end

function M:GET_LUA_ITEM(index)
    local item = self:GET_ITEM(index)
    if item then
        return item:invoke("get")
    end
    return nil
end

function M:ITEM(child, force)
    if self.adapter and not force then
        Lib.log("Currently using the adapter mode, you need to add item, please use the adapter to add.", 4)
        return false
    end
    self:root():AddItem(child)
    return true
end

function M:REMOVE_ITEM(index, force)
    if self.adapter and not force then
        Lib.log("Currently using the adapter mode, you need to remove item, please use the adapter to remove.", 4)
        return false
    end
    local item = self:GET_ITEM(index)
    if item then
        self:root():RemoveItem(item, true)
        return true
    end
    return false
end

function M:ITEM_COUNT()
    if self.adapter then
        return self.adapter:getItemCount()
    else
        return self:root():GetItemCount()
    end
end

function M:CHILD_COUNT()
    return self:root():GetItemCount()
end

function M:CLEAN()
    if self.adapter then
        self.adapter:clearItems()
        return
    end
    while self:CHILD_COUNT() > 0 do
        self:REMOVE_ITEM(0)
    end
    self:root():ResetPos()
end

function M:WIDTH()
    if not self:root() then
        return 0
    end
    return self:root():GetPixelSize().x
end

function M:HEIGHT()
    if not self:root() then
        return 0
    end
    return self:root():GetPixelSize().y
end

function M:ROW_SIZE()
    return 1
end

function M:HORIZONTAL_SPACE()
    return 0
end

function M:VERTICAL_SPACE()
    return 0
end

function M:getOrientation()
    return 0
end

return M