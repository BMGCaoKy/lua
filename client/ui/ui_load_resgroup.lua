---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Anybook.
--- DateTime: 2021/4/12 10:30
---
local M = UI
local guiMgr = L("guiMgr", GUIManager:Instance())
local pluginResGroups = L("pluginResGroups", {})

guiMgr:setResGroupDir("gameres", Root.Instance():getGamePath())
guiMgr:setResGroupDir("asset", Root.Instance():getGamePath() .. "asset")
guiMgr:setResGroupDir("layouts", Root.Instance():getGamePath() .. "gui/layouts")
guiMgr:setResGroupDir("imagesets", Root.Instance():getGamePath() .. "gui/imagesets")
guiMgr:setResGroupDir("fonts", Root.Instance():getGamePath() .. "gui/fonts")
guiMgr:setResGroupDir("looknfeel", Root.Instance():getGamePath() .. "gui/looknfeel")
guiMgr:setResGroupDir("schemes", Root.Instance():getGamePath() .. "gui/schemes")
guiMgr:setResGroupDir("animations", Root.Instance():getGamePath() .. "gui/animations")
guiMgr:setResGroupDir("layout_presets", Root.Instance():getGamePath() .. "gui/layout_presets")

local function setResGroupDir(pluginName)
    local pluginResName = "plugin:" .. pluginName
    local pluginResPath = Root.Instance():getGamePath() .. "plugin/" .. pluginName .. "/"
    guiMgr:setResGroupDir(pluginResName .. "_gameres", pluginResPath)
    guiMgr:setResGroupDir(pluginResName .. "_asset", pluginResPath .. "asset")
    guiMgr:setResGroupDir(pluginResName .. "_layouts", pluginResPath .. "gui/layouts")
    guiMgr:setResGroupDir(pluginResName .. "_imagesets", pluginResPath .. "gui/imagesets")
    guiMgr:setResGroupDir(pluginResName .. "_fonts", pluginResPath .. "gui/fonts")
    guiMgr:setResGroupDir(pluginResName .. "_looknfeel", pluginResPath .. "gui/_looknfeel")
    guiMgr:setResGroupDir(pluginResName .. "_schemes", pluginResPath .. "gui/schemes")
    guiMgr:setResGroupDir(pluginResName .. "_animations", pluginResPath .. "gui/animations")
end

-- 加载UI布局插件内容下的资源位置
function M:loadPluginsUIResGroupDir()
    for pluginName, _ in Lib.dir("plugin", "directory") do
        setResGroupDir(pluginName)
        pluginResGroups[pluginName] = true
    end
end

function M:loadWindowByResGroup(windowName, resGroup)
    local window
	if self.usePool then
		if self.windowPool[windowName] then
			local windowPool = self.windowPool[windowName]
			if #windowPool > 0 then
				window = windowPool[#windowPool]
				windowPool[#windowPool] = nil
				--print("UI open " .. windowName .. " from pool " .. #windowPool)
                return window
			end
		end
	end

    local hasPlugin = pluginResGroups[resGroup]
    local pluginRes
    if hasPlugin then
        pluginRes = string.format("plugin:%s_layouts", resGroup)
        local hasLayout = self:findWindow(windowName, pluginRes)
        if hasLayout then
            window = self:loadWindow(windowName, resGroup)
        end
    end

    if not window and resGroup == "_layouts_" then
        local hasLayout = self:findWindow(windowName, "layout_presets")
        if hasLayout then
            window = self:loadWindow(windowName, "layout_presets")
        end
    end

    if not window then
        local hasLayout = self:findWindow(windowName, resGroup)
        if hasLayout then
            window = self:loadWindow(windowName, resGroup)
        end
    end

    if not window and resGroup ~= "asset" then
        return self:loadWindowByResGroup(windowName, "asset")
    end

    --print("UI open " .. windowName)
    return window
end

function M:loadWindowByResGroupAsync(windowName, resGroup, callback)
    local window
	if self.usePool and self.windowPool[windowName] then
		local windowPool = self.windowPool[windowName]
		if #windowPool > 0 then
			window = windowPool[#windowPool]
			windowPool[#windowPool] = nil
			--print("UI open " .. windowName .. " from pool " .. #windowPool)
            return callback(window)
		end
	end

    local function callback2(window)
        if not window and resGroup ~= "asset" then
            self:loadWindowByResGroupAsync(windowName, "asset", callback)
            return
        end
        callback(window)
    end

    local function callback3(window)
        if not window then
            local hasLayout = self:findWindow(windowName, resGroup)
            if hasLayout then
                self:loadWindowAsync(callback, windowName, resGroup)
                return
            end
        end
        callback2(window)
    end

    local hasPlugin = pluginResGroups[resGroup]
    local pluginRes
    if hasPlugin then
        pluginRes = string.format("plugin:%s_layouts", resGroup)
        local hasLayout = self:findWindow(windowName, pluginRes)
        if hasLayout then
            self:loadWindowAsync(callback, windowName, resGroup)
            return
        end
    end
    callback3(window)
end

local function getWindowAssetRelPath(path)
    if path == "" then
        return path
    end
    path = path:gsub("%./", ""):gsub("%.\\", "")
    return path
end

-- 加载UI脚本
function M:loadLuaScriptByGroup(instance, name)
    if CGame.instance:getEditorType() == 2 then
        return
    end

    local path, chunk
    local isPlugin = true
    local groupName = instance.__groupName
    local gamePath = Root.Instance():getGamePath():gsub("\\", "/")
    local rootPath = Root.Instance():getRootPath():gsub("\\", "/")

    path, chunk = loadLua(name, gamePath .. "plugin/" .. groupName .. "/gui/lua_scripts/?.lua")   --从gameroot/plugin/xx/gui/lua_scripts/找
    if not path then
        isPlugin = false
        if instance.__windowAssetRelPath and instance.__windowAssetLuaScripts then
            path, chunk = loadLua(instance.__windowAssetLuaScripts, gamePath .. "asset/".. getWindowAssetRelPath(instance.__windowAssetRelPath) .. "?.lua") --从gameroot/asset/找
        end
        if not path then
            path, chunk = loadLua(name, gamePath .. "gui/lua_scripts/?.lua") --从gameroot/gui/lua_scripts/找
            if not path then
                path, chunk = loadLua(name, rootPath .. "Media/CEGUI/lua_scripts/?.lua")   --从engineroot/Media/CEGUI/lua_scripts/找
                if not path then
                    path, chunk = loadLua(name, gamePath .. "asset/gui/lua_scripts/?.lua")
                end
            end
        end
        if not path then
            print("cannot find lua script '" .. name .. "' in\n"
                .. "'gui/lua_scripts'\n"
                .. "'Media/CEGUI/lua_scripts'\n"
                .. "'plugin/" .. groupName .. "/gui/lua_scripts'\n"
                .. "'asset/" .. (getWindowAssetRelPath(instance.__windowAssetRelPath or "")) .. "'\n"
            )
            return
        end
    end


    local env = setmetatable({ self = instance, M = instance }, { __index = _G })
    env.__pluginName = isPlugin and groupName or nil
    env.__pluginPath = isPlugin and gamePath .. "plugin/" .. groupName or nil
    local ret, errmsg = load(chunk, "@" .. path, "bt", env)
    assert(ret, errmsg)()
    UIMgr.uiFileList[name] = {
        path = path,
        time = lfs.attributes(path, "modification")
    }
end
