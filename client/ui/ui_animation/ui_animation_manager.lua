---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by bell.
--- DateTime: 2020/4/13 17:52
---
require "ui.ui_animation.ui_animation_config"

---@class UIAnimationManager
local UIAnimationManager = T(UILib, "UIAnimationManager")

local UIAnimationConfig = T(Config, "UIAnimationConfig")

local uuid = require "common.uuid"

local updateTimeInterval = 50 ---UIAnimationManager 更新间隔

---@type UIAnimation[]
local animations = {}

function UIAnimationManager:init()
    --print("UIAnimationManager:init")
    UIAnimationConfig:init()

    animations = {}

    ---@type LuaTimer
    local LuaTimer = T(Lib, "LuaTimer")
    LuaTimer:cancel(self.updateTimer)
    self.updateTimer = LuaTimer:schedule(function()
        self:update()
    end, 0, updateTimeInterval)
end

function UIAnimationManager:update()
    local count = 0
    for i, animation in pairs(animations) do
        if animation.isEnd then
            animations[i]:destroy()
            animations[i] = nil
        else
            animation:update()
            count = count + 1
        end
    end

    --if count > 0 then
    --    print("UIAnimationManager:update " .. count)
    --end
end

---@param window 控件指针
---@param animName string 动画名称
---@param callBack fun() 播放完成后的回调函数
---@return string uuid 唯一id
function UIAnimationManager:play(window, animName, callBack, params)
    if not World.cfg.enableUIAnimation then
        return nil
    end

    local UIAnimationConfig = T(Config, "UIAnimationConfig") ---@type UIAnimationConfig
    local config = UIAnimationConfig:getUIAnimationConfig(animName)
    if not config then
        return nil
    end

    local UIAnimation = require "ui.ui_animation.ui_animation" ---@type UIAnimation
    local uid = uuid()
    local animation = UIAnimation.new(window, config, callBack, uid, params)
    table.insert(animations, animation)
    animation:play()

    --Lib.logDebug(string.format("UIAnimationManager:play " .. animName))

    return uid
end

---@return string uuid 唯一id
function UIAnimationManager:stop(uid)
    for i, animation in pairs(animations) do
        if animation.uid == uid then
            --animations[i]:destroy()
            animations[i] = nil
        end
    end
end

function UIAnimationManager:destroyByManual(uid)
    for i, animation in pairs(animations) do
        if animation.uid == uid then
            animations[i]:destroyByManual()
        end
    end
end

function UIAnimationManager:getUpdateTimeInterval()
    return updateTimeInterval
end

return UIAnimationManager