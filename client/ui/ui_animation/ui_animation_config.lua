---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by bell.
--- DateTime: 2020/4/13 19:45
---
---@class UIAnimationConfig
local UIAnimationConfig = T(Config, "UIAnimationConfig")

local startElementName = ""

local uiAnimations = {}

local uiAnimation = {
    childs = {},
}

local subAnimation = {}

local function parseAttribute(name,value)
    if startElementName == "Animation" then
        uiAnimation[name] = value
    elseif startElementName == "SubAnimation" then
        subAnimation[name] = value
    end
end

function UIAnimationConfig:init()
    local path = Root.Instance():getGamePath() .. "resource/animation/animation.xml"
    --local file = io.open(path)
    --if not file then
    --    --Lib.log("UIAnimationConfig:init not file!", 4)
    --    return
    --end
    --
    --local myxml = file:read('*all')
    local myxml = Lib.read_file(path)
    if not myxml or myxml == "" then
        return
    end
    local SLAXML = require "common.xml.slaxml"
    -- Specify as many/few of these as you like
    local parser = SLAXML:parser{
        startElement = function(name,nsURI,nsPrefix)
            startElementName = name
        end, -- When "<foo" or <x:foo is seen
        attribute    = function(name,value,nsURI,nsPrefix)
            parseAttribute(name,value)
        end, -- attribute found on current element
        closeElement = function(name,nsURI)
            if name == "Animation" then
                table.insert(uiAnimations, uiAnimation)

                uiAnimation = {
                    childs = {},
                }
            elseif name == "SubAnimation" then
                table.insert(uiAnimation.childs, subAnimation)

                subAnimation = {}
            end
        end, -- When "</foo>" or </x:foo> or "/>" is seen
        text         = function(text,cdata)                end, -- text and CDATA nodes (cdata is true for cdata nodes)
        comment      = function(content)                   end, -- comments
        pi           = function(target,content)            end, -- processing instructions e.g. "<?yes mon?>"
    }

    -- Ignore whitespace-only text nodes and strip leading/trailing whitespace from text
    -- (does not strip leading/trailing whitespace from CDATA)
    parser:parse(myxml,{stripWhitespace=true})

    --print("UIAnimationConfig:init " .. Lib.inspect(uiAnimations))
end

function UIAnimationConfig:getUIAnimationConfig(animName)
    for _, uiAnimation in pairs(uiAnimations) do
        if uiAnimation.animName == animName then
            return uiAnimation
        end
    end
    return nil
end

return UIAnimationConfig