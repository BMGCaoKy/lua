---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/10/31 10:14
---
local SizeToCount = {
    --   {Horz,vert}
    XL = { 1, 1 },
    L = { 1, 2 },
    M = { 2, 3 },
    S = { 2, 4 }
}

function M:init()
    WinBase.init(self, "NewAppShop.json")
    self.closeBtn = self:child("NewAppShop-Close")
    self:subscribe(self.closeBtn, UIEvent.EventButtonClick, function()
        self:closeSelf()
    end)
    self.titleName = self:child("NewAppShop-Title-Name")
    self.titleName:SetText(Lang:toText("gui.new.app.shop"))

    self.buying = false

    self.currentGood = nil
    self:initTab()
    self:initMain()
    self:initCurrencyShow()

    Lib.subscribeEvent(Event.EVENT_SEND_BUY_SHOP_RESULT, function(index, limit, msg)
        self:showBuyResult(index, limit, msg)
    end)

    Lib.subscribeEvent(Event.EVENT_BUY_APPSHOP_TIP, function(msg)
        self:showBuyResult(nil, nil, msg)
    end)
end

function M:initTab()
    self.tab = UIMgr:new_widget("tab", "Left", 10)
    self.tab:invoke("BTN_SIZE", { 1, 0 }, { 0, 78 })
    self.tab:invoke("BTN_STRETCH", "60 60 0 0")
    self.tab:invoke("BTN_IMAGE", "set:backpack_display.json image:tab_normal.png", "set:backpack_display.json image:tab_push.png")
    self:child("NewAppShop-Tab-Container"):AddChildWindow(self.tab)
end

function M:initMain()
    self.grid_view = UIMgr:new_widget("grid_view")
    self.grid_view:invoke("INIT_CONFIG", 10, 10, 3)
    self:child("NewAppShop-Content-Container"):AddChildWindow(self.grid_view)
    self.currentGoodsFrame = self:child("NewAppShop-Icon-Frame")
    self.currentIcon = self:child("NewAppShop-Icon-Icon")
    self.currentDesc = self:child("NewAppShop-Select-Desc")
    self.currentDesc:SetText("")
    self.buyBtn = self:child("NewAppShop-Select-Buy-Btn")
    self.buyBtnIcon = self:child("NewAppShop-Coin-Icon")
    self.buyBtnPrice = self:child("NewAppShop-Coin-Price")
    self:subscribe(self.buyBtn, UIEvent.EventButtonClick, function()
        if not self.buying then
            Shop:requestBuyStop(self.currentIndex, 1)
            self.buying = true
            World.Timer(20, function() self.buying = false end)
        end
    end)
end

function M:initCurrencyShow()
    self.currency = self:child("NewAppShop-Tab-Currency-Show")
    self.currency:SetVisible(false)
    self.currencyIcon = self:child("NewAppShop-Currency-Icon")
    self.currencyCount = self:child("NewAppShop-Currency-Count")
    self.currencyDesc = self:child("NewAppShop-Currency-Desc")
end

function M:onOpen(params)
    self.lockTab, self.lockIndex = params.tab, params.index
    self.affirmUiCfg = params.uiCfg
    local cfg = World.cfg.shopFormatDefinition[params.key]
    if not cfg then
        return
    end
    local groups = Shop:getGroups(cfg.filterType)
    self.titleName:SetText(cfg.titleName and Lang:toText(cfg.titleName) or "gui.new.app.shop")
    self.currency:SetVisible(false)
    self:refreshTab(groups, cfg)
end

function M:refreshTab(groups, cfg)
    self.tab:invoke("CLEAN")
    for i, group in pairs(groups) do
        self.tab:invoke("ADD_BUTTON", group.name, function(radioBtn)
            self.grid_view:invoke("CLEAN")
            local goodsSize = cfg.goodsSize
            local size = SizeToCount[goodsSize[i] or "M"]
            self:updateContent(group, size[1], size[2])
            if radioBtn then
                radioBtn:GetChildByIndex(0):SetTextColor({ 1, 1, 1, 1 })
            end
        end, { 255 / 255, 233 / 255, 186 / 255 }, { 111 / 255, 55 / 255, 36 / 255 }, "HT18")
        if (self.lockTab and self.lockTab == group.type) or i == 1 then
            self.tab:invoke("SELECTED", i - 1)
        end
    end
    if cfg.showCurrency then
        self:refreshCurrency(cfg.showCurrency)
    end
end

function M:refreshCurrency(cfg)
    local count = self.tab:invoke("GET_CHILD_COUNT")
    if count > 1 or not next(cfg) or not cfg.coinName then
        return
    end
    self.currency:SetVisible(true)
    self.currencyIcon:SetImage(Coin:iconByCoinName(cfg.coinName))
    self.currencyCount:SetText(Coin:countByCoinName(Me, cfg.coinName))
    self.currencyDesc:SetText(Lang:toText(cfg.coinDesc or ""))
end

function M:updateContent(group, horz, vert)
    local sacle = vert == 2 and 2.5 or 1
    self.grid_view:invoke("INIT_CONFIG", 10, 5, vert)
    local pixel = self:child("NewAppShop-Content-Container"):GetPixelSize()
    local width, height = pixel.x / vert - 10 * sacle, pixel.y / horz - (horz == 1 and 0 or (vert == 3 and 2) or 25)
    for i, shop in pairs(group.goods) do
        local canShow = true
        if shop.checkCond.funcName ~= "" then
            canShow = Me:checkCond(shop.checkCond)
        end
        if canShow then
            self:updateGoods(shop, width, height)
        end
    end
end

function M:resetSelect(template)
    if self.currentGood and self.currentGood ~= template and self.currentGood:GetChildCount() > 5 then
        self.currentGood:GetChildByIndex(5):SetVisible(false)
    end
    self.currentGood = template
    template:GetChildByIndex(5):SetVisible(true)
end

function M:updateGoods(shop, width, height)
    local index = self.grid_view:invoke("ITEM_COUNT") + 1
    local template = GUIWindowManager.instance:CreateWindowFromTemplate("NewAppShop-Good-" .. index, "NewShopItem.json")
    template:SetArea({ 0, 0 }, { 0, 0 }, { 0, width }, { 0, height })
    local size = template:GetPixelSize()
    local bgFrame = shop.bgFrame and string.len(shop.bgFrame) > 0 and shop.bgFrame
    if bgFrame then
        template:SetBackImage(shop.bgFrame)
        if shop.stretchOffset then
            template:SetProperty("StretchType", "NineGrid")
            template:SetProperty("StretchOffset", shop.stretchOffset)
        end
    end
    local icon = template:GetChildByIndex(0)
    icon:SetArea({ 0, 0 }, { 0, 0 }, { 0, size.y * 0.95 }, { 0, size.y * 0.95 })
    icon:SetImage(shop.itemIcon or ResLoader:getIcon(shop.itemType, shop.itemName))
    local price = template:GetChildByIndex(1)
    price:GetChildByIndex(0):SetImage(Coin:iconByCoinId(shop.coinId))
    price:GetChildByIndex(1):SetText(shop.priceAbbr and Lib.switchNum(shop.price) or shop.price)
    price:SetVisible(shop.showPrice)
    local title = template:GetChildByIndex(6)
    local titleIcon = shop.titleIcon
    if titleIcon and titleIcon:len() > 0 then
        title:SetVisible(true)
        title:SetBackImage(titleIcon)
        title:GetChildByIndex(0):SetText(Lang:toText(shop.titleName))
    end
    local leftDescIcon = shop.leftDescIcon
    if leftDescIcon and leftDescIcon:len() > 0 then
        local lIcon = template:GetChildByIndex(4)
        size = shop.leftDescSize and Lib.splitString(shop.leftDescSize or "", "#")
        lIcon:SetWidth({ 0, size[1] or 50 })
        lIcon:SetHeight({ 0, size[2] or 50 })
        lIcon:SetImage(leftDescIcon)
    end
    local rightDescIcon = shop.rightDescIcon
    if rightDescIcon and rightDescIcon:len() > 0 then
        local rIcon = template:GetChildByIndex(3)
        size = shop.rightDescSize and Lib.splitString(shop.rightDescSize or "", "#")
        rIcon:SetWidth({ 0, size[1] or 50 })
        rIcon:SetHeight({ 0, size[2] or 50 })
        rIcon:SetImage(rightDescIcon)
    end
    template:GetChildByIndex(2):SetText(shop.num > 1 and "+" .. Lib.switchNum(shop.num) or "")
    local shopIndex = shop.index
    self:subscribe(template, UIEvent.EventWindowClick, function()
        self:resetSelect(template)
        self:updateCurrentGoods(shopIndex)
    end)
    self.grid_view:invoke("ITEM", template)
    if (self.lockIndex and self.lockIndex == shopIndex) or index == 1 then
        self:resetSelect(template)
        self:updateCurrentGoods(shopIndex)
    end
end

function M:updateCurrentGoods(index)
    local shop = Shop:getShop(index)
    if not shop then
        return
    end
    self.currentIndex = index
    local bgFrame = shop.bgFrame
    self.currentGoodsFrame:SetBackImage("set:backpack_display.json image:frame_bg.png")
    if bgFrame and bgFrame:len() > 0 then
        self.currentGoodsFrame:SetBackImage(shop.chooseBg ~= "" and shop.chooseBg or shop.bgFrame)
        if shop.stretchOffset then
            self.currentGoodsFrame:SetProperty("StretchType", "NineGrid")
            self.currentGoodsFrame:SetProperty("StretchOffset", shop.chooseStretchOffset ~= "" and shop.chooseStretchOffset or shop.stretchOffset)
        end
    end
    self.currentIcon:SetImage(shop.chooseIcon ~= "" and shop.chooseIcon or shop.itemIcon or ResLoader:getIcon(shop.itemType, shop.itemName))
    self.currentDesc:SetText(shop.desc and Lang:toText(shop.desc))
    self.buyBtnIcon:SetImage(Coin:iconByCoinId(shop.coinId))
    self.buyBtnPrice:SetText(shop.priceAbbr and Lib.switchNum(shop.price) or shop.price)
end

function M:showBuyResult(_, _, msg)
    self.buying = false
    if self.affirmUiCfg and (msg == "app_shop_ack_of_money" or msg == "gDiamonds.insufficient") then
        local callBack = function(key)
            if key == "yes" then
                Interface.onRecharge(1)
            end
        end
        local data = {
            uiCfg = self.affirmUiCfg,
            buttonType = 2,
            content = "ask.to.recharge",
            yesKey = "ask.to.recharge.yes",
            noKey = "ask.to.recharge.no",
            callBack = callBack,
            textArgs = {},
            showMask = true
        }
        Lib.emitEvent(Event.EVENT_SHOW_NOTICE, data)
    end
end

function M:closeSelf()
    UI:closeWnd("newAppShop")
end

return M