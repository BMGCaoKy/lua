---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2018/8/29 9:57
---
local saveBuff = {}
local customizeAreaBuff = {}
local countDownBuff = {}

local function getDefaultBoolVar(value, default)
    if not default then
        return value or false
    end
    if value == nil then
        return true
    end
    return value
end

function M:init()
    WinBase.init(self, "PlayerInfo.json")
    self.showBuffIcon = self:child("PlayerInfo-Armor")
    self.showBuffIcon:InitConfig(10, 10, 8)
    self.showBuffCountDown = self:child("PlayerInfo-Countdown")
    self.showBuffCountDown:SetTouchable(false)
    self.showBuffCountDown:SetInterval(World.cfg.buffCountDownItemInterval or 0)
    --加buff时画bufficon
    Lib.lightSubscribeEvent("error!!!!! : win_playerinfp lib event : DRAW_BUFFICON", Event.DRAW_BUFFICON, function(buff)
        self:drawBuffIcon(buff)
    end)
    --删buff时删bufficon
    Lib.lightSubscribeEvent("error!!!!! : win_playerinfp lib event : CLEAR_BUFFICON", Event.CLEAR_BUFFICON, function(buff)
        self:removeBuffIcon(buff)
    end)
    --监听加载玩家信息(头像)
    Lib.lightSubscribeEvent("error!!!!! : win_playerinfp lib event : LOAD_USER_DETAIL_FINISH", Event.LOAD_USER_DETAIL_FINISH, function(data)
        self:setUserDetail(data)
    end)
end

function M:onOpen()
    self:onUpdate()
end

function M:onUpdate()
    local config = World.cfg.playerInfoUI or {}
    local style = config.style
    local isShowHp = getDefaultBoolVar(config.isShowHp, true)
    local isShowFood = getDefaultBoolVar(config.isShowFood, true)
    local isShowExp = getDefaultBoolVar(config.isShowExp, true)

    local health, healthValue, healthText
    local food, foodValue, foodText
    local exp, expValue, expText
    local level
    self.topInfo = self:child("PlayerInfo-Top-Infos")
    self.btmInfo = self:child("PlayerInfo-Bottom-Infos")
    self.myInfo = self:child("PlayerInfo-MyInfo")
    if style == "top" then
        self.topInfo:SetVisible(true)
        self.btmInfo:SetVisible(false)
        self.myInfo:SetVisible(false)
        health = self:child("PlayerInfo-Hp_Bar_Base")
        healthValue = self:child("PlayerInfo-Top-Health-Value")
        healthText = self:child("PlayerInfo-Top-Health-Text")
        food = self:child("PlayerInfo-Food_Bar_Base")
        foodValue = self:child("PlayerInfo-Top-Food-Value")
        foodText = self:child("PlayerInfo-Top-Food-Text")
        exp = self:child("PlayerInfo-Level_Bar_Base")
        expValue = self:child("PlayerInfo-Top-Exp-Value")
        expText = self:child("PlayerInfo-Top-Exp-Text")
    elseif style == "endless" then
        self.topInfo:SetVisible(false)
        self.btmInfo:SetVisible(false)
        self.myInfo:SetVisible(true)
        level = self:child("PlayerInfo-MyLevel")
        exp = self:child("PlayerInfo-MyExp")
        expText = self:child("PlayerInfo-MyLevel-Per")
        health = self:child("PlayerInfo-MyHp")
        healthText = self:child("PlayerInfo-HpText")
        food = self:child("PlayerInfo-MyVp")
        foodText = self:child("PlayerInfo-VpText")
        healthValue = self:child("PlayerInfo-MyHp-p")
        foodValue = self:child("PlayerInfo-MyVp-p")
        expValue = self:child("PlayerInfo-MyExp-p")
    else
        self.topInfo:SetVisible(false)
        self.btmInfo:SetVisible(true)
        self.myInfo:SetVisible(false)
        health = self:child("PlayerInfo-Bottom-Health")
        healthValue = self:child("PlayerInfo-Bottom-Health-Value")
        healthText = self:child("PlayerInfo-Bottom-Health-Text")
        food = self:child("PlayerInfo-Bottom-Food")
        foodValue = self:child("PlayerInfo-Bottom-Food-Value")
        foodText = self:child("PlayerInfo-Bottom-Food-Text")
        exp = self:child("PlayerInfo-Bottom-Exp")
        expValue = exp
        expText = exp
    end

    if World.cfg.hideItemBar then
        self.btmInfo:SetYPosition({0, -10})
        self.myInfo:SetYPosition({0, -30})
    end

    health:SetVisible(isShowHp)
    food:SetVisible(isShowFood)
    exp:SetVisible(isShowExp)

    local isNeedPoint = getDefaultBoolVar(config.isNeedPoint, false)
    local function sf(cur,max)
        local leftChar = cur >= 1000 and "k" or ""
        local rightChar = max >= 1000 and "k" or ""
        local cur = cur >= 1000 and cur/1000 or cur
        local max = max >= 1000 and max/1000 or max
        if isNeedPoint then
            return string.format("%.1f%s/%.1f%s", cur, leftChar, max, rightChar)
        else
            return string.format("%s%s/%s%s", math.ceil(cur), leftChar, math.ceil(max), rightChar)
        end
    end

    local function tick()
        if isShowHp then
            local curHp, maxHp = math.max(0, Me.curHp), Me:prop("maxHp")
            healthValue:SetProgress(curHp / maxHp)
            healthText:SetText(sf(curHp,maxHp))
        end
        if isShowFood then
            local curVp, maxVp = math.max(0, Me.curVp), Me:prop("maxVp")
            foodValue:SetProgress(curVp / maxVp)
            foodText:SetText(sf(curVp,maxVp))
        end
        if isShowExp then
            local curExp, maxExp = math.max(0, Me:getValue("exp")), Me:prop("levelUpExp")
            expValue:SetProgress(curExp / maxExp)
            if style == "endless" then
                local per = string.format("%.1f%%", 100 * curExp/maxExp)
                expText:SetText(string.format("%s[%s]", sf(curExp,maxExp), per))
            else
                expText:SetText(sf(curExp,maxExp))
            end
        end
        if level then
            level:SetText("Lv." .. Me:getValue("level"))
        end
        return true
    end
    World.LightTimer("error!!!!! win_playerinfo updateHpTextAndBar lightTimer!!!", 2, tick)
end

local v_alignment = {LEFT = 0, CENTER = 1, RIGHT = 2, TOP = 0, CENTER = 1, BOTTOM = 2}
local H_alignment = {LEFT = 0, CENTER = 1, RIGHT = 2, TOP = 0, CENTER = 1, BOTTOM = 2}
local function customWindowArea(cell, area, progress)
    local progress = progress or 0
    if not cell or not area then
        return
    end
    local TB, LR = area.VA or 0, area.HA or 0
    local VA = area.VAlign and v_alignment[area.VAlign] or (TB >= 0 and 0 or 2)
    local HA = area.HAlign and H_alignment[area.HAlign] or (LR >= 0 and 0 or 2)
    TB = VA == v_alignment.BOTTOM and TB > 0 and TB * -1 or TB
    LR = HA == H_alignment.RIGHT and LR > 0 and LR * -1 or LR
    cell:SetVerticalAlignment(VA)
    cell:SetHorizontalAlignment(HA)
    cell:SetArea({ 0, LR + progress/2}, { 0, TB + progress/2}, { 0, (area.W or area.width or 70) + progress}, { 0, (area.H or area.height or 70) +progress})
end

function M:drawBuffIcon(buff)
    if not buff.cfg["showIcon"] then
        return
    end

    local buffCfg = buff.cfg
    local function toPath(str)
        if str:sub(1, 1) == "/" then
            return "plugin/" .. buffCfg.plugin .. str
        elseif str:sub(1, 1) == "@" then
            return str:sub(2)
        else
            return "plugin/" .. buffCfg.plugin .. "/" .. buffCfg.modName .. "/" .. buffCfg._name .. "/" .. str
        end
    end

    local buffId = buff.id
    local buffIconName = buffCfg["showIcon"]
    local buffIcon = GUIWindowManager.instance:CreateGUIWindow1("StaticImage", "buffIcon" .. tostring(buffIconName))
    local iconArea = buffCfg.iconArea
    if iconArea then -- buff 如果自定义位置则需要放在根位置并且是从右下角开始计算位置(同技能图标计算一样)
        buffIcon:SetImage(toPath(buffIconName))
        customWindowArea(buffIcon, iconArea, buffCfg.progress)
        self._root:AddChildWindow(buffIcon)
        customizeAreaBuff[buffId] = buffIcon
    elseif buffCfg.countDown then 
        local item = UIMgr:new_widget("icon_count_down", buffCfg.showIconBg, toPath(buffIconName), buff.time)
        self.showBuffCountDown:AddItem(item)
        self:updateCountDown(buff.time, item)
        countDownBuff[buffId] = item
    else
        buffIcon:SetImage(toPath(buffIconName))
        buffIcon:SetArea({ 0, 0 }, { 0, 0 }, { 0, 50 }, { 0, 50 })
        self.showBuffIcon:AddItem(buffIcon)
        saveBuff[buffId] = buffIcon
    end

    local time = (not buff.cfg.noMask) and buff.time
    if buffIconName and time then
        self:updateMask(time, buffIcon)
    elseif buffIconName then
        buffIcon:setMask(0)
    end
end

function M:updateCountDown(time, item)
    time = math.floor(time / 20)
    local function tick()
        if not item then
            return false
        end
        time = time - 1
        if time <= 0 then 
            self.showBuffCountDown:getContainerWindow():RemoveChildWindow1(item)
            self.showBuffCountDown:LayoutChild()
            return false
        end
        item:invoke("SETTEXT", time.."s")
        return true
    end
    item:invoke("SETTEXT", time.."s")
    World.Timer(20, tick)
end

function M:updateMask(time, buffIcon)
    local mask = 1
    local upMask = 1 / (time / 1)
    local function tick()
        if not buffIcon then
            return false
        end
        mask = mask - upMask
        if mask >= 1 then
            buffIcon:setMask(1)
            return false
        end
        buffIcon:setMask(mask)
        return true
    end
    World.Timer(1, tick)
end

function M:removeBuffIcon(buff)
    if saveBuff[buff.id] then
        self.showBuffIcon:RemoveItem(saveBuff[buff.id])
        saveBuff[buff.id] = nil
    end
    if customizeAreaBuff[buff.id] then
        self._root:RemoveChildWindow1(customizeAreaBuff[buff.id])
        customizeAreaBuff[buff.id] = nil
    end
    if countDownBuff[buff.id] then
        self.showBuffCountDown:getContainerWindow():RemoveChildWindow1(countDownBuff[buff.id])
        countDownBuff[buff.id] = nil
    end
end

function M:setUserDetail(data)
    if data.picUrl and #data.picUrl > 0 then
        local headIcon = self:child("PlayerInfo-Top-Player-Icon")
        headIcon:SetImageUrl(data.picUrl)
    else

    end
end

return M
