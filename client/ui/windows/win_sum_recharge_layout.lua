---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Jimmy.
--- DateTime: 2020/1/15 0015 10:57
---
local function checkImageStr(str)
    local cfg = Player.SumRechargeConfig
    if str == "" then
        return ""
    end
    if str and str:find("set:") then
        return str
    end
    if str and cfg and cfg.plugin then
        local path = ResLoader:loadImage(cfg, str)
        return path
    end
    return ""
end

function M:init()
    self.__name = ""
end

function M:onLoad()
    self.currentId = 0
    self.currentGCube = 0
    self.rewardWidth = 80
    local name = string.gsub(self.__name, ".json", "-")
    self.tvTitle = self:child(name .. "Title")
    self.tvHint = self:child(name .. "Hint")
    self.tvWriting = self:child(name .. "CopyWriting")
    self.ivMainImage = self:child(name .. "Main-Image")
    self.awMainActor = self:child(name .. "Main-Actor")
    self.ivSubImage = self:child(name .. "Sub-Image")
    self.tvRechargeValue = self:child(name .. "Recharge-Value")
    self.pbRechargeProgress = self:child(name .. "Recharge-Progress")
    self.btnRecharge = self:child(name .. "Recharge")

    local llRewards = self:child(name .. "Rewards")
    self.gvRewards = UIMgr:new_widget("grid_view")
    self.gvRewards:invoke("AREA")
    self.gvRewards:invoke("INIT_CONFIG", 10, 10, 3)
    self.gvRewards:invoke("MOVE_ABLE", false)
    llRewards:AddChildWindow(self.gvRewards)

    local btnClose = self:child(name .. "Close")
    local btnSmallClose = self:child(name .. "Small-Close")
    self:subscribe(btnClose, UIEvent.EventButtonClick, function()
        UI:closeWnd("sum_recharge_layout")
    end)
    self:subscribe(btnSmallClose, UIEvent.EventButtonClick, function()
        UI:closeWnd("sum_recharge_layout")
    end)

    self:subscribe(self.btnRecharge, UIEvent.EventButtonClick, function()
        local config = Player.getSumRecharge(self.currentId)
        if not config then
            return
        end
        if self.currentGCube >= config.gcube then
            Me:receiveSumRecharge()
            UI:closeWnd("sum_recharge_layout")
        else
            Interface.onRecharge(1)
        end
    end)

    self.btnRecharge:SetText(Lang:toText("sum.recharge.goto.recharge"))
end

function M:onOpen(config)
    if not config then
        return
    end
    if self.currentId == config.id then
        return
    end
    self.currentId = config.id
    self.tvTitle:SetText(Lang:toText(config.titleLang))
    self.tvHint:SetText(Lang:toText(config.hintLang))
    self.tvWriting:SetText(Lang:toText(config.writingLang))
    self.ivMainImage:SetImage(checkImageStr(config.layoutMainImage))
    if string.find(config.layoutMainImage, ".actor") ~= nil then
        self.ivMainImage:SetVisible(false)
        self.awMainActor:SetVisible(true)
        self.awMainActor:SetActor1(config.layoutMainImage, "idle")
    else
        self.ivMainImage:SetVisible(true)
        self.awMainActor:SetVisible(false)
        self.ivMainImage:SetImage(checkImageStr(config.layoutMainImage))
    end
    self.ivSubImage:SetImage(checkImageStr(config.layoutSubImage))
    self.gvRewards:invoke("CLEAN")

    local contentWidth = self.gvRewards:invoke("WIDTH")
    local rewards = config.rewards
    local count = math.min(math.floor(contentWidth / self.rewardWidth), #rewards)
    local lines = math.ceil(#rewards / count)
    local itemHeight = self.gvRewards:invoke("HEIGHT") / lines
    local space = (contentWidth - itemHeight * count) / (count - 1)
    self.gvRewards:invoke("INIT_CONFIG", space, space, count)
    for _, reward in pairs(rewards) do
        local itemName = "RechargeUI_" .. string.gsub(config.rewardUIName, ".json", "-")
        local item = GUIWindowManager.instance:CreateWindowFromTemplate("RechargeUI", config.rewardUIName or "SumRechargeReward.json")
        local ivIcon = item:child(itemName .. "Icon")
        local ivEffect = item:child(itemName .. "Effect")
        local tvCount = item:child(itemName .. "Count")
        local tvName = item:child(itemName .. "Name")
        print(itemName)
        item:SetBackImage(checkImageStr(reward.frame))
        ivIcon:SetImage(checkImageStr(reward.icon))
        ivEffect:PlayEffect1(reward.effect or "")
        tvCount:SetText(string.format("x%s", tostring(reward.count)))
        tvName:SetText(Lang:toText(reward.name))
        item:SetArea({ 0, 0 }, { 0, 0 }, { 0, itemHeight }, { 0, itemHeight })
        self.gvRewards:invoke("ITEM", item)
    end
    self:updateGCubeValue(self.currentGCube)
end

function M:updateGCubeValue(gcube)
    self.currentGCube = gcube
    local config = Player.getSumRecharge(self.currentId)
    if not config then
        return
    end
    self.tvRechargeValue:SetText(string.format("%s/%s", tostring(self.currentGCube), tostring(config.gcube)))
    self.pbRechargeProgress:SetProgress(self.currentGCube / config.gcube)
    if self.currentGCube >= config.gcube then
        self.btnRecharge:SetText(Lang:toText("sum.recharge.goto.receive"))
        self.btnRecharge:SetNormalImage(config.receiveImage)
        self.btnRecharge:SetPushedImage(config.receiveImage)
    else
        self.btnRecharge:SetText(Lang:toText("sum.recharge.goto.recharge"))
        self.btnRecharge:SetNormalImage(config.rechargeImage)
        self.btnRecharge:SetPushedImage(config.rechargeImage)
    end
end

function M:reloadUI(config)
    if self.__name ~= config.layoutUIName then
        if self._root then
            GUIWindowManager.instance:DestroyGUIWindow(self._root)
        end
        self.__name = config.layoutUIName
        WinBase.init(self, config.layoutUIName)
        self:onLoad()
    end
end