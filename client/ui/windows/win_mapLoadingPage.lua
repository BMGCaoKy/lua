---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2018/8/29 17:15
---

local enumShowType = {DOWNLOAD_MAP = 0,
			NETWORK_CONNECT_SUCCESSFUL = 1,
			NETWORK_CONNECT_FAILURE = 2,
			NETWORK_DISCONNECT = 3,
			NETWORK_KICK_OUT = 4,
			NETWORK_TIMEOUT = 5,
			LOAD_WORLD_START = 6,
			LOAD_WORLD_END = 7,
			LOGIN_SUCC = 8,
			LOGIN_FAILURE = 9,
			LOGIN_TOKEN_ERROR = 10,
			LOGIN_GET_USER_ATTR_FAIL = 11,
			LOGIN_RESPONSE_TIMEOUT = 12,
			DOWNLOAD_MAP_SUCCESS = 13,
			DOWNLOAD_MAP_FAILURE = 14,
			DOWNLOAD_MAP_PROGRESS = 15,
			CHECK_VERSION_SUCCESS = 16,
			CHECK_VERSION_FAILURE = 17,
			BE_KICKED = 18,
			GAMEOVER = 19,
			GAME_ALLOCATION_FAILURE = 20,
			GAME_ALLOCATION_FAILURE_VERSION_MISMATCH = 21,
			GAME_ALLOCATION_FAILURE_USER_FULL = 22,
			USER_LOGIN_TIMEOUT = 23,
			SERVER_QUITTING = 24,
			USER_LOGIN_TARGET_NOT_EXIST = 26
		}

local tipMap = {
	[0] = "DOWNLOAD_MAP",
	[1] = "NETWORK_CONNECT_SUCCESSFUL",
	[2] = "NETWORK_CONNECT_FAILURE",
	[3] = "NETWORK_DISCONNECT",
	[4] = "NETWORK_KICK_OUT",
	[5] = "NETWORK_TIMEOUT",
	[6] = "LOAD_WORLD_START",
	[7] = "LOAD_WORLD_END",
	[8] = "LOGIN_SUCC",
	[9] = "LOGIN_FAILURE",
	[10] = "LOGIN_TOKEN_ERROR",
	[11] = "LOGIN_GET_USER_ATTR_FAIL",
	[12] = "LOGIN_RESPONSE_TIMEOUT",
	[13] = "DOWNLOAD_MAP_SUCCESS",
	[14] = "DOWNLOAD_MAP_FAILURE",
	[15] = "DOWNLOAD_MAP_PROGRESS",
	[16] = "CHECK_VERSION_SUCCESS",
	[17] = "CHECK_VERSION_FAILURE",
	[18] = "BE_KICKED",
	[19] = "GAMEOVER",
	[20] = "GAME_ALLOCATION_FAILURE",
	[21] = "GAME_ALLOCATION_FAILURE_VERSION_MISMATCH",
	[22] = "GAME_ALLOCATION_FAILURE_USER_FULL",
	[23] = "USER_LOGIN_TIMEOUT",
}

function M:init()
    assert(WinBase)
	
	local pageJsonPath
	if CGame.instance:getIsEditorEnvironment() then
		pageJsonPath = "gameloading_editor.json"
	else
		pageJsonPath = "LoadingPage.json"
	end
	local m_pImageset = GUIImagesetManager:Instance():createImageset(pageJsonPath)
	local m_pageMap = Lib.read_json_file(Root.Instance():getRootPath().."Media/GUI/imageset/"..pageJsonPath)
	if m_pImageset and m_pageMap then
		m_pImageset:prepare()
		local strTextureFileName = m_pageMap.meta.image
		local texture = TextureManager:Instance():createTexture(strTextureFileName);
		if texture:prepare() then
			texture:load()
		end
		m_pImageset:load()
	end
    WinBase.init(self, "LoadingPage.json", true)
    self:child("LoadingPage-Bg"):SetVisible(true)
    if CGame.instance:getIsEditorEnvironment() then
        self:child("LoadingPage-Bg"):SetImage("set:gameloading_editor.json image:block_mods_bg")
    end
    self:child("LoadingPage-Loading"):SetVisible(true)
    self:child("LoadingPage-LoadingTip"):SetVisible(true)
    self:child("LoadingPage-Loading-Failure"):SetVisible(false)
    self.m_button_close = self:child("LoadingPage-Button-close")
    self.m_textLaodTipMessage = self:child("LoadingPage-TextLaodTipMessage")
	self.m_pProgressBar = self:child("LoadingPage-LoadingProgress")
	self.m_pProgressPercent = self:child("LoadingPage-LoadingTip-Percent")

	self.m_loginSucc = false
	self.m_initMainGui = false
	self.m_progress = 0.0
	self.m_pregressFileSize = 0.0
	self.m_overMessage = ""
	self.m_oldShowType = enumShowType.DOWNLOAD_MAP
	self.m_showType = enumShowType.DOWNLOAD_MAP
	self:onDownloadMapProgress(0.0)
    self.m_button_close:SetText(Lang:toText("gui.exit.game"))

    self:subscribe(self.m_button_close, UIEvent.EventButtonClick, function()
        self:exitGame()
    end)

	self:refreshUi()
end

function M:exitGame()
    CGame.instance:exitGame("offline")
end

function M:refreshUi()
    if self.m_showType == enumShowType.DOWNLOAD_MAP  then
		self:refreshProgress(self.m_progress, self.m_pregressFileSize)
		self.m_textLaodTipMessage:SetText(Lang:toText("gui.loading.page.download.map.loading"))
	elseif self.m_showType == enumShowType.DOWNLOAD_MAP_SUCCESS then
		self:showLoadingSuccess(Lang:toText("gui.loading.page.connected.server.connecting"))
	elseif self.m_showType == enumShowType.NETWORK_CONNECT_SUCCESSFUL then
		self:showLoadingSuccess(Lang:toText("gui.loading.page.player.login.loggingin"))
	elseif self.m_showType == enumShowType.CHECK_VERSION_SUCCESS then
		self:showLoadingSuccess(Lang:toText("gui.loading.page.player.login.loggingin"))
	elseif self.m_showType == enumShowType.LOAD_WORLD_START and CGame.instance:getEditorType() == 1 then
		self:showLoadingSuccess(Lang:toText("gui.message.enter.editor"))
	elseif self.m_showType == enumShowType.LOAD_WORLD_START then
		self:showLoadingSuccess(Lang:toText("gui.loading.page.player.entering.map"))
	elseif self.m_showType == enumShowType.LOAD_WORLD_END then
		if not self.m_loginSucc then
			if Blockman.Instance().singleGame then
				UI:closeWnd(self)
			end
			return
		end
		if not self.m_initMainGui then
			Blockman.Instance():onGameReady()
			self.m_initMainGui = true
		end
		UI:closeWnd(self)
	elseif self.m_showType == enumShowType.NETWORK_CONNECT_FAILURE then
		self:showLoadingFailure(Lang:toText("gui.loading.page.connected.server.failed"))
	elseif self.m_showType == enumShowType.LOGIN_FAILURE then
		self:showLoadingFailure(Lang:toText("gui.loading.page.player.login.failure"))
	elseif self.m_showType == enumShowType.LOGIN_TOKEN_ERROR then
		self:showLoadingFailure(Lang:toText("gui.loading.page.player.login.token.error"))
	elseif self.m_showType == enumShowType.LOGIN_GET_USER_ATTR_FAIL then
		self:showLoadingFailure(Lang:toText("gui.loading.page.player.login.get.user.attr.fail"))
	elseif self.m_showType == enumShowType.LOGIN_RESPONSE_TIMEOUT then
		self:showLoadingFailure(Lang:toText("gui.loading.page.player.login.response.timeout"))
	elseif self.m_showType == enumShowType.CHECK_VERSION_FAILURE then
		self:showLoadingFailure(Lang:toText("gui.loading.page.check.version.failure"))
	elseif self.m_showType == enumShowType.DOWNLOAD_MAP_FAILURE then
		self:showLoadingFailure(Lang:toText("gui.loading.page.download.map.failure"))
	elseif self.m_showType == enumShowType.GAMEOVER then
		self:showLoadingFailure(self.m_overMessage)
	elseif self.m_showType == enumShowType.NETWORK_DISCONNECT then
		self:showLoadingFailure(Lang:toText("gui.message.network.connection.disconnect"))
	elseif self.m_showType == enumShowType.NETWORK_KICK_OUT then
		self:showLoadingFailure(Lang:toText("gui.message.network.connection.kick.out"))
	elseif self.m_showType == enumShowType.BE_KICKED then
		self:showLoadingFailure(self.kickMessage or Lang:toText("gui.message.account.be.kicked"))
	elseif self.m_showType == enumShowType.NETWORK_TIMEOUT then
		self:showLoadingFailure(self.m_overMessage)
	elseif self.m_showType == enumShowType.GAME_ALLOCATION_FAILURE then
		self:showLoadingFailure(Lang:toText("game_allocation_failure"))
	elseif self.m_showType == enumShowType.GAME_ALLOCATION_FAILURE_VERSION_MISMATCH then
		self:showLoadingFailure(Lang:toText("game_allocation_failure_version_mismatch"))
	elseif self.m_showType == enumShowType.GAME_ALLOCATION_FAILURE_USER_FULL then
		self:showLoadingFailure(Lang:toText("game_allocation_failure_user_full"))
	elseif self.m_showType == enumShowType.USER_LOGIN_TIMEOUT then
		self:showLoadingFailure(Lang:toText("user_login_timeout"))
	elseif self.m_showType == enumShowType.SERVER_QUITTING then
		self:showLoadingFailure(Lang:toText("system.message.close.server.loading.tip"))
	elseif self.m_showType == enumShowType.USER_LOGIN_TARGET_NOT_EXIST then
		self:showLoadingFailure(Lang:toText("login_error_target_user_not_exist"))
	end
--	if self.m_showType ~= self.m_oldShowType then
--		self.m_oldShowType = self.m_showType
--		if self.m_showType == enumShowType.NETWORK_CONNECT_FAILURE or self.m_showType == enumShowType.LOGIN_FAILURE or
--			self.m_showType == enumShowType.LOGIN_TOKEN_ERROR or self.m_showType == enumShowType.LOGIN_GET_USER_ATTR_FAIL or
--			self.m_showType == enumShowType.LOGIN_RESPONSE_TIMEOUT or self.m_showType == enumShowType.CHECK_VERSION_FAILURE or
--			self.m_showType == enumShowType.DOWNLOAD_MAP_FAILURE or self.m_showType == enumShowType.GAMEOVER or
--			self.m_showType == enumShowType.NETWORK_DISCONNECT or self.m_showType == enumShowType.NETWORK_KICK_OUT or 
--			self.m_showType == enumShowType.NETWORK_TIMEOUT then
--			--self:stopOrCloseBackgroundMusic()
--		end
--	end
end
function M:refreshProgress(progress, pregressFileSize)
	if pregressFileSize == nil then
		pregressFileSize = 0.0
	end
	self.m_pProgressBar:SetProgress(progress)
	self:child("LoadingPage-LoadingTip"):SetVisible(true)
    local percent = progress * 100
	local fileSizeMb = pregressFileSize / 1024 / 1024
	local text = string.format(Lang:toText("gui.game.loading"), math.ceil(percent), fileSizeMb)
	self.m_pProgressPercent:SetText(text)
end

function M:showLoadingSuccess(msg)
	self:child("LoadingPage-Loading"):SetVisible(true)
	self:child("LoadingPage-LoadingTip"):SetVisible(false)
	self:child("LoadingPage-Loading-Failure"):SetVisible(false)
	self.m_textLaodTipMessage:SetVisible(true)
	self.m_textLaodTipMessage:SetText(msg)
end

function M:showLoadingFailure(msg)
	if self:child("LoadingPage-Loading-Failure"):IsVisible() then
		return
	end
	self:child("LoadingPage-Loading"):SetVisible(false)
	self:child("LoadingPage-LoadingTip"):SetVisible(false)
	self:child("LoadingPage-Loading-Failure"):SetVisible(true)
	self:child("LoadingPage-Msg-Failure"):SetText(tostring(msg))
	CGame.instance:getShellInterface():onEnterGameFailure()
end

function M:SetLoadingProgress(Progress)
	self:refreshProgress(Progress)
end

function M:onGameover(overMessage)  --todo
	self.m_showType = enumShowType.GAMEOVER
	self.m_overMessage = overMessage
	self:refreshUi()
end

function M:onNetworkConnectionTimeout()  --todo
	if self.m_showType ~= enumShowType.GAMEOVER or string.len(self.m_overMessage) == 0 then
		self.m_showType = enumShowType.NETWORK_TIMEOUT
		self.m_overMessage = Lang:toText("gui.message.network.connection.network.error")
		self:refreshUi()
	end
end

function M:onNetworkConnectionKickOut()  --todo
	self.m_showType = enumShowType.NETWORK_KICK_OUT
	self:refreshUi()
end

function M:onNetworkConnectionDisconnect()  --todo
	if self.m_showType == enumShowType.BE_KICKED then
		self:refreshUi()
		return
	end
	self.m_showType = enumShowType.NETWORK_DISCONNECT
	self:refreshUi()
end

function M:onBeKicked(message)  --todo
	self.m_showType = enumShowType.BE_KICKED
	self.kickMessage = message
	self:refreshUi()
end

function M:onDownloadMapFailure()  --todo
	self.m_showType = enumShowType.DOWNLOAD_MAP_FAILURE
	self:refreshUi()
end

function M:onDownloadMapSuccess()  --todo
	self.m_showType = enumShowType.DOWNLOAD_MAP_SUCCESS
	self:refreshUi()
end

function M:onDownloadMapProgress(progess, fileSize)  --todo
	self.m_progress =progess
	self.m_pregressFileSize = fileSize
	self.m_showType = enumShowType.DOWNLOAD_MAP
	self:refreshUi()
end

function M:showLoadingPage(showType, progress, fileSize)
	if showType == enumShowType.NETWORK_DISCONNECT then
		self:onNetworkConnectionDisconnect()
	elseif showType == enumShowType.NETWORK_KICK_OUT then
		self:onNetworkConnectionKickOut()
	elseif showType == enumShowType.NETWORK_TIMEOUT then
		self:onNetworkConnectionTimeout()
	elseif showType == enumShowType.BE_KICKED then
		self:onBeKicked(progress)
	elseif showType == enumShowType.NETWORK_CONNECT_SUCCESSFUL then
		self.m_showType = enumShowType.NETWORK_CONNECT_SUCCESSFUL
		self:refreshUi()
	elseif showType == enumShowType.NETWORK_CONNECT_FAILURE then
		self.m_showType = enumShowType.NETWORK_CONNECT_FAILURE
		self:refreshUi()
	elseif showType == enumShowType.LOAD_WORLD_START then
		self.m_showType = enumShowType.LOAD_WORLD_START
		self:refreshUi()
	elseif showType == enumShowType.LOAD_WORLD_END then
		self.m_showType = enumShowType.LOAD_WORLD_END
		self:refreshUi()
	elseif showType == enumShowType.LOGIN_FAILURE then
		self.m_showType = enumShowType.LOGIN_FAILURE
		self:refreshUi()
	elseif showType == enumShowType.LOGIN_TOKEN_ERROR then
		self.m_showType = enumShowType.LOGIN_TOKEN_ERROR
		self:refreshUi()
	elseif showType == enumShowType.LOGIN_GET_USER_ATTR_FAIL then
		self.m_showType = enumShowType.LOGIN_GET_USER_ATTR_FAIL
		self:refreshUi()
	elseif showType == enumShowType.CHECK_VERSION_SUCCESS then
		self.m_showType = enumShowType.CHECK_VERSION_SUCCESS
		self:refreshUi()
	elseif showType == enumShowType.CHECK_VERSION_FAILURE then
		self.m_showType = enumShowType.CHECK_VERSION_FAILURE
		self:refreshUi()
	elseif showType == enumShowType.LOGIN_SUCC then
		self.m_loginSucc = true
		self:refreshUi()
	elseif showType == enumShowType.DOWNLOAD_MAP_SUCCESS then
		self:onDownloadMapSuccess()
	elseif showType == enumShowType.DOWNLOAD_MAP_FAILURE then
		self:onDownloadMapFailure()
	elseif showType == enumShowType.GAMEOVER then
		--self:onGameover(overMessage)                     --todo
	elseif showType == enumShowType.DOWNLOAD_MAP_PROGRESS then
		self:onDownloadMapProgress(progress, fileSize)
	elseif showType == enumShowType.GAME_ALLOCATION_FAILURE then
		self.m_showType = enumShowType.GAME_ALLOCATION_FAILURE
		self:refreshUi()
	elseif showType == enumShowType.GAME_ALLOCATION_FAILURE_VERSION_MISMATCH then
		self.m_showType = enumShowType.GAME_ALLOCATION_FAILURE_VERSION_MISMATCH
		self:refreshUi()
	elseif showType == enumShowType.GAME_ALLOCATION_FAILURE_USER_FULL then
		self.m_showType = enumShowType.GAME_ALLOCATION_FAILURE_USER_FULL
		self:refreshUi()
	elseif showType == enumShowType.USER_LOGIN_TIMEOUT then
		self.m_showType = enumShowType.USER_LOGIN_TIMEOUT
		self:refreshUi()	
	elseif showType == enumShowType.SERVER_QUITTING then
		self.m_showType = enumShowType.SERVER_QUITTING
		self:refreshUi()
	elseif showType == enumShowType.USER_LOGIN_TARGET_NOT_EXIST then
		self.m_showType = enumShowType.USER_LOGIN_TARGET_NOT_EXIST
		self:refreshUi()
	end
	self.reloadArg = table.pack(showType, progress, fileSize)
end

function M:onReload(reloadArg)
	local showType, progress, fileSize = table.unpack(reloadArg or {}, 1, reloadArg and reloadArg.n)
	self:showLoadingPage(showType, progress, fileSize)
end

function M:onClose()
	self:child("LoadingPage-Bg"):SetImage("")
end

function M:onOpen()
	self:child("LoadingPage-Bg"):SetImage("set:gameloading.json image:block_mods_bg")
end

return M