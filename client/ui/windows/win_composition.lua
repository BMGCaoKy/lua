---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/4/25 16:05
---
local function getLangText(name, sign, name2)
    local _arg = name .. (sign and ("." .. sign) or "")
    return Lang:toText(_arg) == _arg and name2 and Lang:toText({ name2 }) or Lang:toText({ _arg })
end

function M:init()
    WinBase.init(self, "Composition.json")
    self.groupList = {}
    self.masterList = {}

    self._class = nil
    self._group = nil
    self._cell = nil
    self._recipeName = nil
    self._curNum = 1
    self._timer = nil
    self._workbench = nil
    self._tip_reward = nil

    self._curPage = 0
    self._totalPage = 1
    self._matList = {}

    self.com_main = self:child("Composition-Main")

    self:child("Composition-TitleName"):SetText(Lang:toText("composition.title.name"))
    self.com_tabs = self:child("Composition-Content-Tabs")
    self.com_recipe_list = self:child("Composition-Rec-GridView")
    self.com_recipe_bg_tip = self:child("Composition-Rec-BgTip")
    self.com_recipe_bg_tip:SetText(Lang:toText("composition.recipe.list.bg.tip"))
    self.com_recipe_bg_tip:SetVisible(false)

    self.workbench_com_bg = self:child("Composition-Com-Icon-Bg")
    self.workbench_com_icon = self:child("Composition-Com-Icon")
    self.workbench_com_desc = self:child("Composition-Com-Desc")
    self.workbench_com_stack = self:child("Composition-Mat-NumberControl")
    self.workbench_com_btn = self:child("Composition-Workbench-Button")
    self:child("Composition-Workbench-Btn-Name"):SetText(Lang:toText("composition.workbench.btn"))
    self:subscribe(self.workbench_com_btn, UIEvent.EventButtonClick, function()
        self:onClickButton()
    end)

    self.warning = self:child("Composition-Warning")
    self.warning:SetVisible(false)
    self.warning_msg = self:child("Composition-Warning-Msg")
    self.warning_msg:SetText("")

    self.com_tip = self:child("Composition-Tip")
    self:subscribe(self.com_tip, UIEvent.EventWindowClick, function()
        self.com_tip:SetVisible(false)
        if self.com_submit:IsVisible() or self.com_submit_info:IsVisible() then
            Lib.emitEvent(Event.SHOW_COMPOSITION, false, false)
        end
    end)
    self.com_tip:SetVisible(false)
    self:child("Composition-Tip-Title"):SetText(Lang:toText("composition.tip.title"))
    self.com_tip_msg = self:child("Composition-Tip-Msg")
    self.com_tip_bg = self:child("Composition-Tip-Icon-Bg")
    self.com_tip_icon = self:child("Composition-Tip-Icon")
    self.com_tip_num = self:child("Composition-Tip-Num")
    self.com_tip_btn = self:child("Composition-Tip-Button")
    self.com_tip_btn:SetText(Lang:toText("composition.tip.btn"))
    self:subscribe(self.com_tip_btn, UIEvent.EventButtonClick, function()
        self.com_tip:SetVisible(false)
        if self.com_submit:IsVisible() or self.com_submit_info:IsVisible() then
            Lib.emitEvent(Event.SHOW_COMPOSITION, false, false)
        end
    end)

    self.com_replenish = self:child("Composition-Replenish")
    self.com_replenish:SetVisible(false)
    self:child("Composition-Replenish-Title"):SetText(Lang:toText("composition.replenish.title"))
    self.com_rep_msg = self:child("Composition-Replenish-Msg")
    self.com_rep_sure_btn = self:child("Composition-Replenish-Sure-Btn")
    self.com_rep_no_btn = self:child("Composition-Replenish-No-Btn")

    self.mat_list = {}
    local _mat_list = self:child("Composition-Mat-List")
    local index = #self.mat_list
    local mat = _mat_list:GetChildByIndex(index)
    if mat then
        repeat
            mat = _mat_list:GetChildByIndex(index)
            self.mat_list[index + 1] = mat
            index = index + 1
        until index >= _mat_list:GetChildCount()
    end

    self.com_submit = self:child("Composition-Submit")
    self.com_submit:SetVisible(false)
    self.com_sm_list = self:child("Composition-SM-Content")
    self.com_sm_list:InitConfig(8, 8, 3)
    self.com_sm_list:SetMoveAble(false)
    self.com_sm_titleName = self:child("Composition-SM-Title-Name")
    self.com_sm_back = self:child("Composition-SM-Back")
    self.com_sm_next = self:child("Composition-SM-Next")
    self.com_sm_btn = self:child("Composition-SM-Btn")
    self:subscribe(self.com_sm_btn, UIEvent.EventButtonClick, function()
        self:onClickButton()
    end)
    self:subscribe(self:child("Composition-SM-Close"), UIEvent.EventButtonClick, function()
        Lib.emitEvent(Event.SHOW_COMPOSITION, false, false)
    end)
    self:subscribe(self:child("Composition-SM-Back"), UIEvent.EventWindowClick, function()
        self:pageTurning(false)
    end)
    self:subscribe(self:child("Composition-SM-Next"), UIEvent.EventWindowClick, function()
        self:pageTurning(true)
    end)

    self.com_submit_info = self:child("Composition-Submit-Info")
    self.com_submit_info:SetVisible(false)
    self.com_sm_info_main = self:child("Composition-SM-Info-Main")
    self.com_sm_info_main:SetText("")
    self.com_sm_info_others = self:child("Composition-SM-Info-Others")
    self.com_sm_info_others:SetMoveAble(false)
    self.com_sm_info_others:InitConfig(10, 10, 2)
    self.com_sm_info_titleName = self:child("Composition-SM-Info-TitleName")
    self.com_sm_info_list = self:child("Composition-SM-Info-Mat-Content")
    self.com_sm_info_list:SetMoveAble(false)
    self.com_sm_info_list:InitConfig(25, 25, 5)
    self.com_sm_info_btn = self:child("Composition-SM-Info-Btn")
    self:subscribe(self.com_sm_info_btn, UIEvent.EventButtonClick, function()
        self:onClickButton()
    end)
    self:subscribe(self:child("Composition-SM-Info-Close"), UIEvent.EventButtonClick, function()
        Lib.emitEvent(Event.SHOW_COMPOSITION, false, false)
    end)

    self:subscribe(self:child("Composition-Mat-Add"), UIEvent.EventButtonClick, function()
        self:updateMatInfo(true)
    end)
    self:subscribe(self:child("Composition-Mat-Sub"), UIEvent.EventButtonClick, function()
        self:updateMatInfo(false)
    end)
    self.mat_num = self:child("Composition-Mat-Num")

    self:subscribe(self:child("Composition-Close"), UIEvent.EventButtonClick, function()
        Lib.emitEvent(Event.SHOW_COMPOSITION, false, false)
    end)

    Lib.subscribeEvent(Event.FINISH_COMPOUND, function(ret, msg, times, reward)
        if ret then
            self:showTip(msg, times, reward)
        else
            self:showWarning(msg)
        end
    end)

    Lib.subscribeEvent(Event.SHOW_COMPOUND_RESULT, function(ret)
        self:showCompoundResult(ret)
    end)

    self.bg_btn = self:child("Composition-Bg-Btn")
    self.bg_btn:SetVisible(false)
    self:subscribe(self.bg_btn, UIEvent.EventButtonClick, function()
        UI:closeWnd("popups_property")
        self.bg_btn:SetVisible(false)
    end)
    self:resetWorkBench()
end

function M:onOpen(class)
    self.com_main:SetVisible(class and true)
    if not class then
        return
    end
    if self._class ~= class then
        self._group = nil
        self._class = class
    end
    local groups = Composition:getGroupByClass(class)
    Me:getRecipeList(class, function(list)
        self.masterList = list
        self.com_tabs:CleanupChildren()
        Composition:treatmentGroups(self.masterList, self.groupList)
        for i, group in ipairs(groups) do
            self:addTabView(group, i - 1)
        end
    end)
    self.reloadArg = table.pack(self._class)
end

--添加分组标签页
function M:addTabView(group, index)
    local name = group.name
    local recipes = Composition:getInnateRecipes(self._class, name ~= "All" and name)
    self.groupList[name] = self.groupList[name] or {}
    for _, rec in ipairs(recipes) do
        table.insert(self.groupList[name], rec)
    end
    local strName = "Composition-Content-Tab-Button-" .. index
    local radioItem = GUIWindowManager.instance:CreateGUIWindow1("RadioButton", strName)
    radioItem:SetArea({ 0, 4 }, { 0, index * 84 + 2 }, { 0.96, 0 }, { 0, 82 })
    radioItem:SetNormalImage("set:gui_composition.json image:tab_normal.png")
    radioItem:SetPushedImage("set:gui_composition.json image:tab_pushed.png")
    radioItem:SetProperty("StretchType", "NineGrid")
    radioItem:SetProperty("StretchOffset", "25 25 15 15")
    radioItem:SetTextColor({ 222 / 255, 218 / 255, 145 / 255 })
    radioItem:SetText(getLangText("group", name, group.langName))
    self:subscribe(radioItem, UIEvent.EventRadioStateChanged, function(statu)
        if statu:IsSelected() then
            statu:SetWidth({ 0.96, 12 })
            statu:SetTextColor({ 65 / 255, 60 / 255, 37 / 255 })
            self:onRadioChange(name)
        else
            statu:SetWidth({ 0.96, 0 })
            statu:SetTextColor({ 222 / 255, 218 / 255, 145 / 255 })
        end
    end)
    self.com_tabs:AddChildWindow(radioItem)
    if self._group == name then
        radioItem:SetSelected(true)
    elseif not self._group and index == 0 then
        radioItem:SetSelected(true)
    end
end

--点击分组更新配方
function M:onRadioChange(groupName)
    self._group = groupName
    self._cell = nil
    self:resetWorkBench()
    self.com_recipe_list:RemoveAllItems()
    self.com_recipe_list:ResetPos()
    local row = math.floor(self.com_recipe_list:GetPixelSize().x / 95)
    self.com_recipe_list:InitConfig(6, 6, row)
    local recipes = self.groupList[groupName] or {}
    self.com_recipe_bg_tip:SetVisible(#recipes == 0)
    for _, rec in ipairs(recipes) do
        local tmp = UIMgr:new_widget("cell")
        self:updateRecipeItem(tmp, rec)
        self.com_recipe_list:AddItem(tmp)
    end
end

--检测可合成数量
local function checkRecipeEnoughCount(materials)
    local enoughCount = 0
    local tryRet = true
    repeat
        for _, mat in ipairs(materials) do
            local _, own, need = Composition:getMatInfo(Me, mat, enoughCount + 1)
            if own < need then
                tryRet = false
            end
        end
        if tryRet then
            enoughCount = enoughCount + 1
        end
    until not tryRet
    return enoughCount > 0 and enoughCount
end

function M:showItemDesc(type, name)
    local item
    if type == "Item" then
        item = Item.CreateItem(name, 1)
    elseif type == "Block" then
        item = Item.CreateItem("/block", 1, function(_item)
            _item:set_block(name)
        end)
    end
    UI:openWnd("popups_property", true, item, nil, true, 1, self.bg_btn, true, -200, 200)
    self.bg_btn:SetVisible(true)
end

--更新配方详细
function M:updateRecipeItem(template, recipeName)
    local recipe = Composition:getRecipe(recipeName)
    local composition = recipe.composition
    local fullName = composition[1].name
    local type = composition[1].type
    local item
    if type == "Item" then
        item = Item.CreateItem(fullName, 1)
    elseif type == "Block" then
        item = Item.CreateItem("/block", 1, function(_item)
            _item:set_block(fullName)
        end)
    end
    local tryRet = checkRecipeEnoughCount(recipe.materials)
    local _, cfg, icons = Composition:getComInfo(composition, recipe.cfg)
    template:invoke("FRAME_SIZE", item, 95, 95)
    template:invoke("FRAME_IMAGE", item, "set:gui_composition.json image:item_frame.png")
    template:invoke("FRAME_SELECT_IMAGE", item, "set:gui_composition.json image:item_frame_select.png")
    template:invoke("SHOW_MASKING", item, tryRet == false)
    template:invoke("DIY_ITEM", item, recipe.icon or (icons[1].reDeal and ResLoader:loadImage(cfg, icons[1].icon) or icons[1].icon), tryRet)
    self:subscribe(template, UIEvent.EventWindowClick, function()
        self:resetWorkBench()
        if self._cell then
            self._cell:receiver():onClick(false)
        end
        self._cell = template
        self._cell:receiver():onClick(true)
        self._recipeName = recipeName
        self:showWorkbench(recipe, composition)
    end)
end

--点击配方，更新合成台信息
function M:showWorkbench(recipe, com)
    self.workbench_com_stack:SetVisible(not recipe.noStark)
    local _, _, icon = Composition:getComInfo(com, recipe.cfg)
    self.workbench_com_icon:SetImage(icon[1] and icon[1].icon or "")
    self:unsubscribe(self.workbench_com_icon)
    self:subscribe(self.workbench_com_icon, UIEvent.EventWindowClick, function()
        self:showItemDesc(com[1].type, com[1].name)
    end)
    local fullName = type(com) ~= "table" and com or (com.fullName == "/block" and com.blockId or com.fullName or icon[1].icon)
    self.workbench_com_desc:SetText(getLangText(fullName, "name", recipe.name))
    self:showMaterial(recipe.materials)
end

-- red 255 0 0  green 0 255 0
-- 点击配方，显示所需材料，need数量
function M:showMaterial(materials)
    --assert(#materials < 4, #materials)
    for i = 1, 3 do
        local mat = materials[i]
        local mat_layout = self.mat_list[i]
        if not mat_layout then
            return
        end
        local tmp_name = mat_layout:GetChildByIndex(0)
        local tmp_frame = mat_layout:GetChildByIndex(1)
        local tmp_icon = tmp_frame:GetChildByIndex(0)
        local tmp_frame_count = tmp_frame:GetChildByIndex(1)
        local own_num = tmp_frame_count:GetChildByIndex(0)
        own_num:SetHorizontalAlignment(2)
        local cut_num = tmp_frame_count:GetChildByIndex(1)
        cut_num:SetHorizontalAlignment(2)
        local need_num = tmp_frame_count:GetChildByIndex(2)
        need_num:SetHorizontalAlignment(2)
        if mat then
            local fullName = mat.name
            tmp_name:SetText(getLangText(fullName, "name", fullName))
            local icon, own, need = Composition:getMatInfo(Me, mat, self._curNum)
            tmp_icon:SetImage(mat.icon or icon)
            self:unsubscribe(tmp_frame)
            self:subscribe(tmp_frame, UIEvent.EventWindowClick, function()
                self:showItemDesc(mat.type, fullName)
            end)
            need_num:SetText(Lib.switchNum(need))
            need_num:SetProperty("AllShowOneLine", "true")
            own_num:SetText(Lib.switchNum(own))
            own_num:SetProperty("AllShowOneLine", "true")
            cut_num:SetProperty("AllShowOneLine", "true")
            own_num:SetTextColor(own >= need and { 124 / 255, 180 / 255, 52 / 255 } or { 255 / 255, 0 / 255, 0 / 255 })
            need_num:SetXPosition({ 0, 0 })
            local x = need_num:GetWidth()[2]
            cut_num:SetXPosition({ 0, -x })
            x = x + cut_num:GetWidth()[2]
            own_num:SetXPosition({ 0, -x })
            tmp_frame_count:SetVisible(true)
        else
            tmp_name:SetText("")
            tmp_icon:SetImage("")
            tmp_frame_count:SetVisible(false)
        end
    end
end

--增加/减少 合成数量，更新材料消耗
function M:updateMatInfo(add)
    local recipeName = self._recipeName
    if not recipeName then
        return
    end
    local recipe = Composition:getRecipe(recipeName)
    if recipe.noStark then
        return
    end
    if add then
        self._curNum = self._curNum + 1
    elseif self._curNum > 1 then
        self._curNum = self._curNum - 1
    else
        return
    end
    self.mat_num:SetText(self._curNum)
    self:showMaterial(recipe.materials)
end

--点击合成按钮
function M:onClickButton()
    if not self._recipeName then
        self:showWarning("unselected.recipe")
        return
    end
    Me:startCompound(self._class, self._recipeName, self._curNum, function(ret)
        if ret.ok and self._recipeName then
            Composition:startCompound(Me, self._class, self._recipeName)
        elseif self._recipeName then
            self:showWarning(ret.msg, ret.sup)
        end
    end)
end

--显示消耗货币补充材料
function M:showSupCompound(sup)
    self.com_replenish:SetVisible(true)
    self.com_rep_msg:SetText(getLangText("composition.replenish.msg", self._recipeName, "composition.replenish.msg"))
    local coinId = sup.coinId
    local icon = ""
    if coinId == 0 then
        icon = "set:diamond.json image:Diamond-icon2.png"
    elseif coinId == 2 then
        icon = "set:app_shop.json image:app_shop_gold"
    end
    self:child("Composition-Replenish-Icon"):SetImage(icon)
    self:child("Composition-Replenish-Num"):SetText(sup.price)

    self.com_rep_sure_btn:SetText(Lang:toText("composition.replenish.sure.btn"))
    self:unsubscribe(self.com_rep_sure_btn)
    self:subscribe(self.com_rep_sure_btn, UIEvent.EventButtonClick, function()
        Composition:supStartCompound(Me, self._class)
        self.com_replenish:SetVisible(false)
    end)
    self.com_rep_no_btn:SetText(Lang:toText("composition.replenish.no.btn"))
    self:unsubscribe(self.com_rep_no_btn)
    self:subscribe(self.com_rep_no_btn, UIEvent.EventButtonClick, function()
        Composition:stopCompound(Me, self._class)
        self.com_replenish:SetVisible(false)
    end)
end

--显示警告
function M:showWarning(msg, sup)
    sup = sup or {}
    if not msg then
        return
    end
    if self._timer then
        self._timer()
        self._timer = nil
        self.warning:SetVisible(false)
    end
    if next(sup) then
        self:showSupCompound(sup)
    else
        self.warning:SetVisible(true)
        self.warning_msg:SetText(Lang:toText(msg))
        self._timer = World.Timer(40, function()
            self.warning:SetVisible(false)
            self.warning_msg:SetText("")
        end)
    end
end

--显示合成成功提示
function M:showTip(msg, times, reward)
    self.com_tip_bg:CleanupChildren()
    self.com_tip:SetVisible(true)
    self.com_tip_msg:SetText(Lang:toText(msg))
    if not self._recipeName then
        return
    end
    local recipe = Composition:getRecipe(self._recipeName)
    self:showMaterial(recipe.materials)
    if self._group then
        self:onRadioChange(self._group)
    end
end

--重置合成台信息
function M:resetWorkBench()
    if self._workbench then
        self._workbench:invoke("RESET")
        self._workbench = nil
    end
    self.workbench_com_icon:SetImage("")
    self.workbench_com_stack:SetVisible(false)
    self.workbench_com_desc:SetText("")
    self._recipeName = nil
    self._curNum = 1
    self.mat_num:SetText(self._curNum)
    self:showMaterial({})
end

--显示合成结果
function M:showCompoundResult(ret)
    if ret and self._recipeName then
        Composition:startCompound(Me, self._class, self._recipeName)
    else
        self:showWarning("composition-replenish-failed")
    end
end

--显示提交配方的信息(无信息/有信息)
function M:showSubmitRecipe(class, recipeName, info, title, button)
    self._class = class
    self._recipeName = class .. "/" .. recipeName
    local recipe = Composition:getRecipe(self._recipeName)
    self._matList = recipe.materials
    if next(info) then
        self:updateSubmitRecipeWithInfo(info, title, button)
    else
        self:updateSubmitRecipe(title, button)
    end
end

--更新不带Info
function M:updateSubmitRecipe(title, button)
    self.com_submit:SetVisible(true)
    self.com_sm_titleName:SetText(Lang:toText(title or "composition.sm.title"))
    self.com_sm_btn:SetText(Lang:toText(button or "composition.submit.recipe.btn.name"))
    self._totalPage = #self._matList // 3 + (((#self._matList % 3) > 0) and 1 or 0)
    self:pageTurning(true)
end

--更新翻页内容，turn:true 下页，false 上页
function M:pageTurning(turn)
    self._curPage = self._curPage + (turn and 1 or -1)
    self.com_sm_back:SetVisible(self._curPage ~= 1 and (self._curPage <= self._totalPage))
    self.com_sm_next:SetVisible(self._curPage < self._totalPage)
    self:updatePageContent(self._curPage)
end

--更新当前页面的内容
function M:updatePageContent(curPage)
    self.com_sm_list:RemoveAllItems()
    for i = (curPage - 1) * 3 + 1, curPage * 3 do
        local material = self._matList[i]
        if not material then
            break
        end
        local template = GUIWindowManager.instance:CreateWindowFromTemplate("Composition-Submit-Page-" .. i, "CompositionSubmitItem.json")
        self:updateSubmitMat(template, material)
        self.com_sm_list:AddItem(template)
        self.com_sm_list:SetItemAlignment(1)
    end
    self.com_sm_list:ResetPos()
end

--更新带Info
function M:updateSubmitRecipeWithInfo(info, title, button)
    self.com_submit_info:SetVisible(true)
    self.com_sm_info_titleName:SetText(Lang:toText(title or "composition.sm.info.title"))
    self.com_sm_info_btn:SetText(Lang:toText(button or "composition.submit.recipe.btn.name"))
    if not next(info) then
        return
    end
    self.com_sm_info_main:CleanupChildren()
    self.com_sm_info_others:RemoveAllItems()
    self.com_sm_info_list:RemoveAllItems()
    for i, c in ipairs(info) do
        if i == 1 then
            local tem = self:updateSubmitInfo(i, c, 1, 1, "HT18")
            self.com_sm_info_main:AddChildWindow(tem)
        else
            local tem = self:updateSubmitInfo(i, c, nil, nil, "HT16")
            self.com_sm_info_others:AddItem(tem)
            self.com_sm_info_others:SetItemAlignment(1)
        end
    end
    self.com_sm_info_others:ResetPos()
    for i, mat in ipairs(self._matList) do
        local template = GUIWindowManager.instance:CreateWindowFromTemplate("Composition-Submit-Page-" .. i, "CompositionSubmitItemInfo.json")
        self:updateSubmitMat(template, mat)
        self.com_sm_info_list:AddItem(template)
    end
    self.com_sm_info_list:ResetPos()
end

--更新提交配方所需的材料信息
function M:updateSubmitMat(template, mat)
    local icon = template:GetChildByIndex(1)
    local name = template:GetChildByIndex(2)
    local numOwn = template:GetChildByIndex(3):GetChildByIndex(1)
    local numNeed = template:GetChildByIndex(3):GetChildByIndex(2)
    local iconPath, own, need = Composition:getMatInfo(Me, mat, 1)
    local fullName = mat.name
    name:SetText(getLangText(fullName, "name", fullName))
    icon:SetImage(mat.icon or iconPath)
    numOwn:SetText(own)
    numOwn:SetTextColor(own >= need and { 0 / 255, 255 / 255, 0 / 255 } or { 255 / 255, 0 / 255, 0 / 255 })
    numNeed:SetText(need)
    local replenish = template:GetChildCount() > 4 and template:GetChildByIndex(4)
    if not replenish then
        return
    end
    replenish:SetVisible(mat.coinName and mat.price > 0 and own < need)
    local coinName, price = mat.coinName, mat.price
    if not coinName and not (price and price > 0) then
        return
    end
    local coinIcon = replenish:GetChildByIndex(0)
    coinIcon:SetImage((coinName == "golds" and "set:app_shop.json image:app_shop_gold") or (coinName == "gDiamonds" and "set:diamond.json image:Diamond-icon2.png") or "")
    replenish:GetChildByIndex(1):SetText(math.ceil(price * (need - own)))
end

function M:updateSubmitInfo(index, info, hAligment, vAligment, font)
    local width = 10
    local template = GUIWindowManager.instance:CreateGUIWindow1("Layout", "Composition-SM-Info-Other-" .. index)
    template:SetArea({ 0, 0 }, { 0, 0 }, { 0.5, 0 }, { 0, 30 })
    template:SetHorizontalAlignment(hAligment or 0)
    template:SetVerticalAlignment(vAligment or 0)
    local prefix_icon = info.prefixIcon
    if prefix_icon then
        local icon = GUIWindowManager.instance:CreateGUIWindow1("StaticImage", "Composition-SM-Info-Other-prefixIcon" .. index)
        icon:SetArea({ 0, width }, { 0, 0 }, { 0, 18 }, { 0, 18 })
        width = width + 30
        icon:SetImage(prefix_icon)
        icon:SetVerticalAlignment(1)
        template:AddChildWindow(icon)
    end
    local text_1 = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "Composition-SM-Info-Other-text_1-" .. index)
    text_1:SetVerticalAlignment(1)
    text_1:SetProperty("Font", font or "HT14")
    text_1:SetArea({ 0, width }, { 0, 0 }, { 0.5, 0 }, { 0, 30 })
    text_1:SetText(info.key1 and Lang:toText({ info.key1, info.textP1 } or info.textP1))
    text_1:SetProperty("TextSelfAdaptHigh", "true")
    template:AddChildWindow(text_1)
    width = width + 150
    local p_icon = info.promoteIcon
    if p_icon then
        local icon = GUIWindowManager.instance:CreateGUIWindow1("StaticImage", "Composition-SM-Info-Other-icon" .. index)
        icon:SetArea({ 0, width }, { 0, 0 }, { 0, 25 }, { 0, 20 })
        width = width + 50
        icon:SetImage(p_icon)
        icon:SetVerticalAlignment(1)
        template:AddChildWindow(icon)
    end
    if info.textP2 then
        local key2 = info.key2
        local text_2 = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "Composition-SM-Info-Other-text_2-" .. index)
        text_2:SetVerticalAlignment(1)
        text_2:SetProperty("Font", font or "HT14")
        text_2:SetArea({ 0, width }, { 0, 0 }, { 0.3, 0 }, { 0, 30 })
        text_2:SetText(key2 and Lang:toText({ key2, info.textP2 }) or info.textP2)
        text_2:SetProperty("TextSelfAdaptHigh", "true")
        template:AddChildWindow(text_2)
    end
    return template
end

function M:onClose()
    if self._class then
        Composition:stopCompound(Me, self._class)
    end
    self.warning:SetVisible(false)
    self.com_submit:SetVisible(false)
    self.com_replenish:SetVisible(false)
    self.com_submit_info:SetVisible(false)
    self.groupList = {}
    self._curPage = 0
    self._totalPage = 1
    self._matList = {}
    self:resetWorkBench()
end

return M