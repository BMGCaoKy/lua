---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/11/16 12:29
---
local function getLangText(priorty, minor)
    minor = minor or priorty
    return Lang:toText(priorty) == priorty and Lang:toText(minor) or Lang:toText(priorty)
end

local function getRankIcon(rank)
    if rank == 1 then
        return "set:rank_frame.json image:rank1.png"
    elseif rank == 2 then
        return "set:rank_frame.json image:rank2.png"
    elseif rank == 3 then
        return "set:rank_frame.json image:rank3.png"
    end
end

local function getRankFrameAndDeco(rank)
    if rank == 1 then
        return "set:rank_frame.json image:rank1_frame.png", "set:rank_frame.json image:rank1_frame_deco.png", "set:rank_frame.json image:gold.png"
    elseif rank == 2 then
        return "set:rank_frame.json image:rank2_frame.png", "set:rank_frame.json image:rank2_frame_deco.png", "set:rank_frame.json image:sliver.png"
    elseif rank == 3 then
        return "set:rank_frame.json image:rank3_frame.png", "set:rank_frame.json image:rank3_frame_deco.png", "set:rank_frame.json image:copper.png"
    else
        return "set:rank_frame.json image:rank_frame.png"
    end
end

function M:init()
    WinBase.init(self, "RankFrame.json")

    self.topRank = self:child("RankFrame-Top-Rank")
    self.topRank:SetText(getLangText("rank.frame.top.rank"))
    self.topPlayerName = self:child("RankFrame-Top-PlayerName")
    self.topPlayerName:SetText(getLangText("rank.frame.top.player.name"))
    self.topScoreName = self:child("RankFrame-Top-Score")
    self.topScoreName:SetText(getLangText("rank.frame.top.score.name"))
    self.list = self:child("RankFrame-List")
    self.list:SetInterval(-5)
    self:initMyRank()
    self:initMyReward()
end

function M:initMyRank()
    self.myRank = self:child("RankFrame-My")
    self.myRank:SetHeight({ 0, 60 })
    self.myRankIcon = self:child("RankFrame-Rank-Icon")
    self.myRankText = self:child("RankFrame-Rank-Text")
    self.myRankName = self:child("RankFrame-Rank-Name")
    self.myRankScore = self:child("RankFrame-Rank-Score")
end

function M:initMyReward()
    self.myReward = self:child("RankFrame-My-Reward")
    self.myReward:SetVisible(false)
    self:child("RankFrame-Reward-Desc-Text"):SetText(getLangText("rank.frame.reward.desc"))
    self.myRewardGridView = self:child("RankFrame-Reward-GridView")
    self.myRewardGridView:SetMoveAble(false)
end

function M:onOpen(params)
    self.rankType = assert(params.rankType)
    self.subId = assert(params.subId)
    self.topRank:SetText(getLangText("rank.frame.top.rank." .. self.rankType .. "." .. self.subId, "rank.frame.top.rank"))
    self.topPlayerName:SetText(getLangText("rank.frame.top.player.name." .. self.rankType .. "." .. self.subId, "rank.frame.top.player.name"))
    self.topScoreName:SetText(getLangText("rank.frame.top.score.name." .. self.rankType .. "." .. self.subId, "rank.frame.top.score.name"))
    self:updateMyRank()
    self:updateMyReward()
    self:updateRankList()
end

function M:updateRankList()
    self.list:ClearAllItem()
    local rankData = Rank.GetRankData(self.rankType)
    local subData = rankData and rankData[self.subId] or {}
    for i, data in pairs(subData) do
        local rankItem = GUIWindowManager.instance:CreateWindowFromTemplate("rankFrameList-" .. i, "RankFrameList.json")
        self:refreshRank(rankItem, data)
        rankItem:SetWidth({ 0.9, 0 })
        self.list:AddItem(rankItem)
    end
end

function M:refreshRank(template, data)
    local deco = template:GetChildByIndex(0)
    local rankIcon = template:GetChildByIndex(1)
    local rankText = template:GetChildByIndex(2)
    local rankName = template:GetChildByIndex(3)
    local rankDeco = template:GetChildByIndex(4)
    local rankScore = template:GetChildByIndex(5)
    local rank = data.rank
    local rankBg, bgDeco, rankDecoPath = getRankFrameAndDeco(rank)
    template:SetBackImage(rankBg)
    deco:SetImage(bgDeco or "")
    rankDeco:SetImage(rankDecoPath or "")
    if rank > 3 then
        rankText:SetText(rank)
    else
        rankIcon:SetVisible(true)
        rankIcon:SetImage(getRankIcon(rank))
    end
    rankName:SetText(data.name)
    rankScore:SetText(data.score)
end

function M:updateMyRank()
    self.myRankIcon:SetImage("")
    self.myRankText:SetText("")
    local myRank = Rank.GetMyRanks(self.rankType)[self.subId] or 0
    local myScore = Rank.GetMyScores(self.rankType)[self.subId] or 0
    self.myRankIcon:SetVisible(false)
    if myRank > 3 then
        self.myRankText:SetText(myRank)
    elseif myRank == 0 then
        self.myRankText:SetText(Lang:toText("rank.frame.no.rank"))
    else
        self.myRankIcon:SetVisible(true)
        self.myRankIcon:SetImage(getRankIcon(myRank))
    end
    self.myRankName:SetText(Me.name)
    self.myRankScore:SetText(math.max(myScore, 0))
end

local function getRibbonByIndex(index)
    if index == 1 then
        return "set:rank_frame.json image:gold_ribbon.png"
    elseif index == 2 then
        return "set:rank_frame.json image:purple_ribbon.png"
    else
        return "set:rank_frame.json image:blue_ribbon.png"
    end
end

function M:updateMyReward()
    self.myRewardGridView:RemoveAllItems()
    local reward = Rank.GetRankReward(self.rankType, self.subId)
    if not reward then
        self.myReward:SetVisible(false)
        self.myRank:SetHeight({ 0, 60 })
        self.list:SetHeight({ 1, -120 })
        return
    end
    self.myReward:SetVisible(true)
    self.myRank:SetHeight({ 0.3, 60 })
    self.list:SetHeight({ 0.7, -120 })
    self.myRewardGridView:InitConfig(25, 10, #reward)
    local pixelSize = self.myRewardGridView:GetPixelSize()
    for i, rew in pairs(reward) do
        local rewardWnd = GUIWindowManager.instance:CreateWindowFromTemplate("rewardItem-" .. i, "RankFrameReward.json")
        rewardWnd:SetArea({ 0, 0 }, { 0, 0 }, { 0, pixelSize.y * 0.8 }, { 0, pixelSize.y * 0.7 })
        self:refreshReward(rewardWnd, rew, i)
        self.myRewardGridView:AddItem(rewardWnd)
    end
end

function M:refreshReward(template, reward, index)
    local title = template:GetChildByIndex(1)
    local titleName = title:GetChildByIndex(0)
    local icon = template:GetChildByIndex(0)
    local titleBg = getRibbonByIndex(index)
    title:SetBackImage(titleBg)
    local ranked = reward.rank
    titleName:SetText("Top " .. (ranked[1] == ranked[2] and ranked[1] or (ranked[1] .. "-" .. ranked[2])))
    local pixel = template:GetPixelSize()
    icon:SetArea({ 0, 0 }, { 0, -10 }, { 0, pixel.y * 0.75 }, { 0, pixel.y * 0.75 })
    local _, cfg, icons = ResLoader:rewardContent(reward.cfg)
    icon:SetImage(icons[1] and (icons[1].reDeal and ResLoader:loadImage(cfg, icons[1].icon) or icons[1].icon) or "")
    self:unsubscribe(template)
    self:subscribe(template, UIEvent.EventWindowClick, function()
        Rank.RequestRankReward(self.rankType, self.subId, index)
    end)
end

return M