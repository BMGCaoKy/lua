---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2020/1/10 17:40
---
local taskState = {
    ACCEPTABLE = 0,
    UNDERWAY = 1,
    ACHIEVABLE = 2,
    COMPLETED = 3,
    OTHER = 10
}

function M:init()
    WinBase.init(self, "TaskTracking.json")
    self:child("TaskTracking-Title-Name"):SetText(Lang:toText("task.tracking.title"))
    self:child("TaskTracking-Reward-Name"):SetText(Lang:toText("task.tracking.reward"))

    self.abortBtn = self:child("TaskTracking-Title-Close")
    self.targetText = self:child("TaskTracking-Target")

    self.trackReward = self:child("TaskTracking-Reward-Content")
    self.gridReward = UIMgr:new_widget("grid_view")
    self.gridReward:invoke("AUTO_COLUMN", false)
    self.gridReward:invoke("INIT_CONFIG", 10, 10, 2)
    self.gridReward:invoke("MOVE_ABLE", false)
    self.trackReward:AddChildWindow(self.gridReward)
    self.fullName = nil

    self:subscribe(self.abortBtn, UIEvent.EventButtonClick, function()
        if self.fullName then
            Me:abortTask(self.fullName)
        end
        self.fullName = nil
        Lib.emitEvent(Event.EVENT_ADD_RIGHT_COLLAPSIBLE)
    end)

    Lib.subscribeEvent(Event.EVENT_UPDATE_TASK_TRACE, function(fullName, status)
        if not fullName or status == taskState.COMPLETED then
            Lib.emitEvent(Event.EVENT_ADD_TASK_TRACE)
            return
        end
        self:updateTaskTracking(fullName)
    end)
end

function M:onOpen(fullName)
    if fullName then
        self.fullName = fullName
        self:initContent()
    end
end

local function getLangText(name, sign, arg1, ...)
    local arg = name .. "." .. sign
    local text = Lang:toText(arg) == arg and arg1 and Lang:toText({ arg1, ... }) or Lang:toText({ arg, ... })
    return text
end

local function getTargetMsg(task)
    local name = task.fullName
    local msg = ""
    local taskData = Me:data("task")
    for i, t in ipairs(task.targets) do
        if msg:len() > 0 then
            msg = msg .. "\n"
        end
        local targets = taskData[name] and taskData[name].targets or {}
        local cfgName = t.cfgName and (t.cfgName ~= "nil" and t.cfgName or name .. "." .. t.type .. "." .. t.cfgName)
        local arg = cfgName and { cfgName, targets[i] or 0, t.count } or { t.count, targets[i] or 0, t.count }
        msg = msg .. getLangText(name, t.type .. ".target" .. i, t.name or "target." .. t.type, table.unpack(arg, 1, arg.n))
    end
    return msg
end

function M:initContent()
    local fullName = self.fullName
    local task = Player.GetTask(fullName)
    local targetText = self.targetText
    local apprecHeight = self.targetText:GetHeight()[2]
    local msg = getTargetMsg(task)
    targetText:SetText(msg)
    targetText:SetProperty("TextSelfAdaptHigh", "true")
    self:root():SetHeight({ 0, self:root():GetHeight()[2] + (targetText:GetHeight()[2] - apprecHeight) })
    local _, _, icons = ResLoader:rewardContent(task.reward, task.group)
    for i = 1, 2 do
        local r = icons[i]
        if not r then
            goto continue
        end
        local layout = GUIWindowManager.instance:CreateGUIWindow1("Layout", "track-reward-" .. i)
        layout:SetArea({ 0, 0 }, { 0, 0 }, { 0.4, 0 }, { 1, 0 })
        local icon = GUIWindowManager.instance:CreateGUIWindow1("StaticImage", "track-reward-icon-" .. i)
        icon:SetArea({ 0, 0 }, { 0, 0 }, { 0, 35 }, { 0, 35 })
        icon:SetImage(r.icon or "")
        layout:AddChildWindow(icon)
        local num = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "track-reward-num-" .. i)
        num:SetArea({ 0, 50 }, { 0, 0 }, { 0, 0 }, { 1, 0 })
        num:SetText(Lib.switchNum(r.count or 0))
        layout:AddChildWindow(num)
        self.gridReward:invoke("ITEM", layout)
        :: continue ::
    end
end

function M:updateTaskTracking(fullName)
    if not self.fullName or fullName ~= self.fullName then
        return
    end
    local task = Player.GetTask(fullName)
    local targetText = self.targetText
    local apprecHeight = targetText:GetHeight()[2]
    local msg = getTargetMsg(task)
    targetText:SetText(msg)
    targetText:SetProperty("TextSelfAdaptHigh", "true")
    self:root():SetHeight({ 0, self:root():GetHeight()[2] + (targetText:GetHeight()[2] - apprecHeight) })
end

function M:onClose()
    self.fullName = nil
    self.gridReward:invoke("CLEAN")
end

return M