---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/12/14 14:30
---
local frameDesc = {}
local showCount = 20

function M:init()
    WinBase.init(self, "SellShop.json")

    self.titleName = self:child("SellShop-Title-Name")
    self.titleName:SetText(Lang:toText("sell.shop.title.name"))
    self.gridView = UIMgr:new_widget("grid_view")
    self.gridView:invoke("AUTO_COLUMN", false)
    self.gridView:invoke("MOVE_ABLE", false)
    self.gridView:invoke("INIT_CONFIG", 5, 5, 5)
    self.contentContainer = self:child("SellShop-Container")
    self.contentContainer:AddChildWindow(self.gridView)
    self.pageDesc = self:child("SellShop-PageTuring-Desc")
    self.pageTuringLast = self:child("SellShop-PageTuring-Last")
    self:subscribe(self.pageTuringLast, UIEvent.EventButtonClick, function()
        if self.page == 1 then
            return
        end
        self.page = self.page - 1
        self:updateCells()
    end)
    self.pageTuringNext = self:child("SellShop-PageTuring-Next")
    self:subscribe(self.pageTuringNext, UIEvent.EventButtonClick, function()
        if self.page == self.maxPage then
            return
        end
        self.page = self.page + 1
        self:updateCells()
    end)
    self.page = 1
    self.maxPage = 1
    self.count = 0
    self.sells = {}
    self.affirmUiCfg = nil

    self.informationDesc = self:child("SellShop-Information-Desc")
    self.informationDesc:SetText("")
    self.informationIcon = self:child("SellShop-Information-Icon")
    self.informationIcon:SetImage("")
    self.informationCount = self:child("SellShop-Information-Count")
    self.informationCount:SetText("")

    self:subscribe(self:child("SellShop-Close"), UIEvent.EventButtonClick, function()
        self:closeSelf()
    end)

    local callBack = function(key)
        if key == "yes" then
            self:onSell()
        end
    end
    self:subscribe(self:child("SellShop-Sell-Button"), UIEvent.EventButtonClick, function()
        if self.count <= 0 then
            return
        end
        local data = {
            uiCfg = self.affirmUiCfg,
            buttonType = 2,
            content = "sell.shop.canSell",
            yesKey = "sell.shop.canSell.yes",
            noKey = "sell.shop.canSell.no",
            callBack = callBack,
            textArgs = {},
            showMask = true
        }
        if self.affirmUiCfg then
            Lib.emitEvent(Event.EVENT_SHOW_NOTICE, data)
        else
            callBack("yes")
        end
    end)
    self:child("SellShop-Sell-Button-Name"):SetText(Lang:toText("sell.shop.btn"))

    Lib.subscribeEvent(Event.EVENT_SELL_RESULT, function(ret)
        self:sellResultRefresh(ret.sells)
    end)
end

function M:onOpen(params)
    local control = UI:getWnd("actionControl", true)
    if control and control.onDragTouchUp then
        control:onDragTouchUp()
    end
    local sellCfg = Me:cfg().sellShop or {}
    self.cfg = params.key and sellCfg[params.key]
    self.affirmUiCfg = params.uiCfg
    if not self.cfg then
        self:closeSelf()
        return
    end
    if type(params.title) == "string" then
        self.titleName:SetText(Lang:toText(params.title))
    end
    self:filterTray()
end

function M:filterTray()
    self.curTrays = {}
    local trayArray = Me:tray():query_trays(function(tray)
        return Define.TRAY_CLASS_BAG == Define.TRAY_TYPE_CLASS[tray:type()]
    end)
    local filterKey = self.cfg.filterKey
    for _, element in pairs(trayArray) do
        local tray = element.tray
        local items = tray and tray:query_items(function(item)
            local cfg = item:cfg()
            if cfg.sell and (not filterKey or cfg[filterKey]) then
                return true
            end
            return false
        end)
        for _, item in pairs(items) do
            table.insert(self.curTrays, item)
        end
    end
    local sortGist = self.cfg.sortGist
    if sortGist then
        table.sort(self.curTrays, function(item1, item2)
            local gist_1, gist_2 = item1:cfg()[sortGist], item2:cfg()[sortGist]
            if gist_1 and not gist_2 then
                return true
            end
            if gist_1 and gist_2 then
                return gist_1 > gist_2
            end
            return false
        end)
    end
    local count = #self.curTrays
    self.maxPage = count == 0 and 1 or count // showCount + (count % showCount == 0 and 0 or 1)
    self.page = math.min(self.page, self.maxPage)
    self:updateCells()
end

frameDesc.ItemLevel = function(item, params)
    local curLevel = item:getValue(params.key)
    if not curLevel or curLevel == 0 then
        return ""
    end
    return params.langKey and Lang:toText({ params.langKey, curLevel } or curLevel)
end

--更新每个item的信息
function M:refreshItem(template)
    local item = template:data("item")
    local qualityCfg = World.cfg.trayQualityFrame
    template:invoke("RESET")
    if qualityCfg then
        template:invoke("SELECT_TYPE", item, qualityCfg.selectType)
        template:invoke("FRAME_IMAGE", item, qualityCfg.defaultIcon, qualityCfg.frameStretch)
        template:invoke("FRAME_SELECT_IMAGE", item, qualityCfg.selectFrameIcon, qualityCfg.selectStretch)
    end
    local pixelSize = self.contentContainer:GetPixelSize()
    template:invoke("FRAME_SIZE", item, pixelSize.x / 5 - 4, pixelSize.y / 4 - 4)
    self.gridView:invoke("ITEM", template)
    if not item or item:null() then
        return
    end
    local cfg = item:cfg()
    self:checkCell(template)
    self:unsubscribe(template)
    self:subscribe(template, UIEvent.EventWindowClick, function()
        self:switchCell(template)
    end)
    local quality = cfg.quality
    local qualityDiff = qualityCfg.qualityFrameDiff
    if quality and qualityDiff and qualityDiff[quality] then
        template:invoke("FRAME_IMAGE", item, qualityDiff[quality].icon, qualityDiff[quality].stretch or qualityCfg.frameStretch)
    end
    template:invoke("ITEM_SLOTER", item)
    template:invoke("SHOW_EFFECT", item)
    -- 如果item配置里有showActor的字段 就显示actor
    if cfg.showActor then
        template:invoke("ACTOR_ITEM", item, cfg.showActor)
    end
    if cfg.signIcon then
        local icon = ResLoader:loadImage(cfg, cfg.signIcon)
        template:invoke("ITEM_SIGN", item, icon)
    end
    local starLevel = cfg.starLevel
    if starLevel then
        template:invoke("SHOW_STAR_LEVEL", item, starLevel.level, ResLoader:loadImage(cfg, starLevel.icon), starLevel.width, starLevel.height)
    end
    local fd = self.cfg.frameDesc or {}
    if next(fd) then
        local frameProc = assert(frameDesc[fd.type], fd.key)
        local text = frameProc(item, fd)
        template:invoke("LD_BOTTOM", item, text, "HT18")
    end
    local pixel = template:GetPixelSize()
    local l = math.min(pixel.x, pixel.y) - 25
    template:invoke("SET_ITEM_AREA", {{0,0},{0,0},{0,l}, {0,l}})
end

function M:checkCell(cell)
    if not cell then
        return
    end
    local item = cell:data("item")
    local tid, slot = item:tid(), item:slot()
    local key = tostring(tid .. ":" .. slot)
    local select = self.sells[key]
    if select then
        cell:receiver():onClick(true)
    end
end

function M:switchCell(cell)
    if not cell then
        return
    end
    local item = cell:data("item")
    local tid, slot = item:tid(), item:slot()
    local key = tostring(tid .. ":" .. slot)
    local select = self.sells[key]
    if select then
        cell:receiver():onClick(false)
        self.sells[key] = nil
    else
        cell:receiver():onClick(true)
        self.sells[key] = { tid = tid, slot = slot, count = 1 }
    end
    self:refreshInformation(item, not select)
end

function M:updateCells()
    self.gridView:invoke("CLEAN")
    if self.loadTimer then
        self.loadTimer()
        self.loadTimer = nil
    end
    local index = self.page * showCount - showCount + 1
    self.loadTimer = World.Timer(1, function()
        if index // showCount + (index % showCount == 0 and 0 or 1) ~= self.page then
            return false
        end
        local cell = UIMgr:new_widget("cell")
		cell:SetName("cell-"..index)
        cell:setData("item", self.curTrays[index])
        index = index + 1
        self:refreshItem(cell)
        return true
    end)
    self:updatePageDesc()
end

function M:refreshInformation(item, select)
    if not item or item:null() then
        return
    end
    local sell = item:cfg().sell
    if not sell or not sell.coinName then
        return
    end
    local count = sell.count or 1
    self.count = self.count + (select and count or -count)
    self.informationDesc:SetText(Lang:toText("sell.shop.information.desc"))
    self.informationCount:SetText(Lib.switchNum(self.count))
    if not self.coinIcon or string.len(self.coinIcon) == 0 then
        self.coinIcon = Coin:iconByCoinName(sell.coinName)
        self.informationIcon:SetImage(self.coinIcon)
    end
    if self.count <= 0 then
        self.coinIcon = ""
        self.informationCount:SetText("")
        self.informationDesc:SetText("")
        self.informationIcon:SetImage("")
    end
end

function M:updatePageDesc()
    self.pageDesc:SetText(self.page .. " / " .. self.maxPage)
end

function M:onSell()
    if next(self.sells) then
        Me:sendPacket({
            pid = "SellItems",
            sells = self.sells,
        }, function(ret)
            Lib.emitEvent(Event.EVENT_SELL_RESULT, ret)
        end)
        self.count = 0
        self.coinIcon = ""
        self.sells = {}
        self.informationCount:SetText("")
        self.informationDesc:SetText("")
        self.informationIcon:SetImage("")
    end
end

function M:sellResultRefresh(sells)
    for _, sell in pairs(sells) do
        for i, item in pairs(self.curTrays) do
            if item:tid() == sell.tid and item:slot() == sell.slot then
                table.remove(self.curTrays, i)
            end
        end
    end
    local count = #self.curTrays
    self.maxPage = count == 0 and 1 or count // showCount + (count % showCount == 0 and 0 or 1)
    self.page = math.min(self.page, self.maxPage)
    self:updateCells()
end

function M:closeSelf()
    UI:closeWnd(self)
end

function M:onClose()
    if self.loadTimer then
        self.loadTimer()
        self.loadTimer = nil
    end
    self.page = 1
    self.maxPage = 1
    self.count = 0
    self.coinIcon = ""
    self.sells = {}
    self.curTrays = {}
    self.informationCount:SetText("")
    self.informationIcon:SetImage("")
    self.gridView:invoke("CLEAN")
end