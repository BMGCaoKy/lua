---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by work.
--- DateTime: 2019/5/9 14:32
---

function M:init()
    WinBase.init(self, "Home.json", true)

    self.home_title_name = self:child("Home-Main-Title-Name")
    self.home_title_name:SetText(Lang:toText("gui_home_title_name"))

    self.player_info_icon = self:child("Home-Player-Info-Icon")
    self.player_info_content = self:child("Home-Player-Info-Content")
    self.home_info_content = self:child("Home-Info-Content")
    self.home_info_desc = self:child("Home-Info-Desc")

    self.home_diy_content = self:child("Home-DIY-Content")
    self.home_item_grid_view = GUIWindowManager.instance:CreateGUIWindow1("GridView", "Home-Diy-Content-ItemList-GridView")
    self.home_item_grid_view:SetArea({ 0, 0 }, { 0, 0 }, { 0.99, 0 }, { 0.95, 0 })
    self.home_item_grid_view:SetHorizontalAlignment(1)
    self.home_item_grid_view:SetVerticalAlignment(1)
    self.home_item_grid_view:InitConfig(15, 25, 3)
    self.home_diy_content:AddChildWindow(self.home_item_grid_view)

    self.home_diy_buttons = self:child("Home-DIY-Button")

    self:subscribe(self:child("Home-Main-Close"), UIEvent.EventButtonClick, function()
        Lib.emitEvent(Event.EVENT_SHOW_HOME, false)
    end)
end

function M:onOpen(params)
    self.regId = params.regId
    self.modName = params.modName
    if params.targetUid then
        local targetInfo = UserInfoCache.GetCache(params.targetUid)
        local picUrl = targetInfo and targetInfo.picUrl
        if picUrl and #picUrl > 0 then
            self.player_info_icon:SetImageUrl(picUrl)
        else
            self.player_info_icon:SetImage("set:default_icon.json image:header_icon")
        end
    end
    if params.titleName then
        self.home_title_name:SetText(Lang:toText(params.titleName))
    end
    if next(params.playerInfo) then
        self:updatePlayerInfo(params.playerInfo)
    end
    if next(params.homeInfo) then
        self:updateHomeInfo(params.homeInfo)
    end
    if next(params.content) then
        self:updatePanelContent(params.content)
    end
    if next(params.buttons) then
        self:updateButtons(params.buttons)
    end
    self.home_info_desc:SetText(Lang:toText(params.homeDesc or "home.info.desc"))
    self.reloadArg = table.pack(params.targetUid, params.playerInfo, params.homeInfo,params.buttons, params.content, params.titleName)

end

function M:updatePlayerInfo(info)
    local fullName = info.cfg
    local values = info.values
    local cfg = Entity.GetCfg(fullName)[info.cfgName]
    self.player_info_content:CleanupChildren()
    for i, v in ipairs(values) do
        local text = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "Player-Info-Content-" .. i)
        text:SetHorizontalAlignment(1)
        text:SetTextHorzAlign(1)
        text:SetArea({ 0, 0 }, { 0, (i - 1) * 25 }, { 1, 0 }, { 0, 25 })
        local arg = type(v) == "table" and { table.unpack(v, 1, v.n) } or { v }
        text:SetText(Lang:toText({ cfg[i].name, table.unpack(arg, 1, arg.n) }))
        self.player_info_content:AddChildWindow(text)
    end
end

function M:updateHomeInfo(info)
    local cfgName = info.cfg
    local values = info.values
    local cfg = Entity.GetCfg(cfgName)[info.cfgName]
    self.home_info_content:CleanupChildren()
    for i, v in ipairs(values) do
        local info_layout = GUIWindowManager.instance:CreateGUIWindow1("Layout", "Home-Info-Layout-" .. i)
        info_layout:SetArea({ 0, 10 }, { 0, (i - 1) * 35 }, { 1, 0 }, { 0, 35 })
        local width = 0
        local icon = cfg[i].icon
        if icon then
            local iconImage = GUIWindowManager.instance:CreateGUIWindow1("StaticImage", "Home-Info-Icon-" .. i)
            iconImage:SetArea({ 0, 0 }, { 0, 0 }, { 0, 30 }, { 0, 30 })
            iconImage:SetImage(icon)
            width = 30
            info_layout:AddChildWindow(iconImage)
        end
        local text_info = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "Home-Info-Content-" .. i)
        text_info:SetArea({ 0, width + 5 }, { 0, 0 }, { 1, 0 }, { 0, 35 })
        text_info:SetText(Lang:toText({ cfg[i].name }))
        text_info:SetProperty("Font", "HT16")
        info_layout:AddChildWindow(text_info)
        local text_value = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "Home-Info-Value-" .. i)
        text_value:SetProperty("Font", "HT16")
        text_value:SetXPosition({ 0, -10 })
        text_value:SetText(cfg[i].valueName and Lang:toText({ cfg[i].valueName, v }) or v)
        text_value:SetTextColor({ 143 / 255, 255 / 255, 0 / 255 })
        text_value:SetHorizontalAlignment(2)
        text_value:SetTextHorzAlign(2)
        info_layout:AddChildWindow(text_value)
        self.home_info_content:AddChildWindow(info_layout)
    end
end

function M:updatePanelContent(content)
    self.home_item_grid_view:RemoveAllItems()
    for i, con in ipairs(content) do
        local newHomeItem = GUIWindowManager.instance:LoadWindowFromJSON("HomeItems.json")
        local icon = newHomeItem:GetChildByIndex(0)
        newHomeItem:GetChildByIndex(2):SetText(Lang:toText(con.desc or "home.item.desc"))
        icon:SetImage(con.icon)
        newHomeItem:GetChildByIndex(1):SetVisible(not con.unlock)
        self:subscribe(icon, UIEvent.EventWindowClick, function()
            if con.event then
                Me:doCallBack(self.modName, con.event, self.regId, con.context)
            end
        end)
        self.home_item_grid_view:AddItem(newHomeItem)
    end
end

function M:updateButtons(buttons)
    self.home_diy_buttons:CleanupChildren()
    for i, btn in ipairs(buttons) do
        local button = GUIWindowManager.instance:CreateGUIWindow1("Button", "Home-Diy-Button-" .. i)
        button:SetNormalImage(btn.buttonImage or "set:other.json image:btn_help")
        button:SetPushedImage(btn.buttonImage or "set:other.json image:btn_help")
        button:SetHorizontalAlignment(2)
        button:SetVerticalAlignment(1)
        button:SetArea({ 0, -60 - (i - 1) * 280 }, { 0, 0 }, { 0, 215 }, { 0, 65 })
        self:subscribe(button, UIEvent.EventButtonClick, function()
            if btn.event then
                Me:doCallBack(self.modName, btn.event, self.regId, btn.context)
            end
        end)

        local btnText = GUIWindowManager.instance:CreateGUIWindow1("StaticText", "Home-Diy-Button-Text-" .. i)
        btnText:SetText(Lang:toText(btn.name))
        btnText:SetArea({ 0, 0 }, { 0, 0 }, { 1, 0 }, { 0.9, 0 })
        btnText:SetTextColor({ 105 / 255, 73 / 255, 29 / 255 })
        btnText:SetTextHorzAlign(1)
        btnText:SetTextVertAlign(1)
        button:AddChildWindow(btnText)

        self.home_diy_buttons:AddChildWindow(button)
    end
end