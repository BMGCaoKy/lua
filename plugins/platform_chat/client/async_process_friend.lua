---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hlm.
--- DateTime: 2021/6/2 12:06
---

local self = AsyncProcess
local strfmt = string.format
local cjson = require("cjson")

-- 根据玩家id获取状态-在线状态
function AsyncProcess.GetPlayerOnlineState(userIds, callback)
    local urlKey = "GetPlayerOnlineState" -- strfmt("%s/gameaide/api/v1/game/friends/status", self.ClientHttpHost)
    local params = {}
    local body = userIds
    self.HttpRequestByKey("POST", urlKey, {}, params, function (response, isSuccess)
        if not isSuccess then
            print("AsyncProcess GetPlayerOnlineState Error: " , response.code)
            return
        end
        callback(response.data)
    end, body, true)
end

-- 根据游戏id获取同玩好友和非同玩好友
function AsyncProcess.ClientGetChatFriendWithGameId(language, type, pageNo, pageSize, callback)
    local urlKey = "ClientGetChatFriendWithGameId" -- strfmt("%s/gameaide/api/v1/game/friends", self.ClientHttpHost)
    local params = {
        { "gameId", World.GameName },
        { "language", tostring(language) },
        { "pageNo", tostring(pageNo) },
        { "pageSize", tostring(pageSize) },
        { "type", type }
    }
    self.HttpRequestByKey("GET", urlKey, {}, params, function (response, isSuccess)
        if not isSuccess then
            print("ClientGetChatFriendWithGameId Error: " , response.code)
            return
        end
        callback(response.data)
    end, {}, true)
end

-- 根据游戏id判断玩家是同玩好友还是非同玩好友
function AsyncProcess.CheckClientPlayerIsMyFriend(userId, callback)
    local urlKey = "CheckClientPlayerIsMyFriend" -- strfmt("%s/gameaide/api/v1/game/friend/judge", self.ClientHttpHost)
    local params = {
        { "gameId", World.GameName },
        { "judgeUserId", userId }
    }
    self.HttpRequestByKey("GET", urlKey, {}, params, function (response, isSuccess)
        if not isSuccess then
            print("CheckClientPlayerIsMyFriend Error: " , response.code)
            return
        end
        if callback then
            callback(response.data)
        end
    end, {}, true)
end