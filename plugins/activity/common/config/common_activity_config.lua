---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/16 11:46
---
local CommonActivity = T(Lib, "CommonActivity") ---@type CommonActivity
local CommonActivityType = T(Config, "CommonActivityType")  ---@type CommonActivityType
local CommonActivityConfig = T(Config, "CommonActivityConfig") ---@class CommonActivityConfig

local DefaultPanelJson = {
    [CommonActivityType.MustLottery] = "MustLotteryPanel.json",
    [CommonActivityType.LuckyLottery] = "LuckyTurntablePanel.json",
}

local ConfigList = {}

local function initCommonActivityCfg()
    ConfigList = {}
end

local function init()
    initCommonActivityCfg()
    local path = Root.Instance():getGamePath() .. "config/common/CommonActivitySetting.json"
    local file = io.open(path, "r")
    if not file then
        return
    end
    local content = file.read(file, "*a")
    io.close(file)
    local json = require("cjson")
    local success, setting = pcall(json.decode, content)
    if not success then
        Lib.logError(setting)
        return
    end
    local settings = Lib.read_csv_file(Root.Instance():getGamePath() .. "config/common/CommonActivity.csv", 3) or {}
    for _, item in pairs(settings) do
        local startTime, endTime = 0, -1
        if item.startDate ~= "#" then
            local _, _, year, month, day, hour, min, sec = string.find(item.startDate, "(%d+)-(%d+)-(%d+)-(%d+)-(%d+)-(%d+)")
            startTime = Lib.date2BeiJingTime({ year = year, month = month, day = day, hour = hour, min = min, sec = sec })
        end
        if item.endDate ~= "#" then
            local _, _, year, month, day, hour, min, sec = string.find(item.endDate, "(%d+)-(%d+)-(%d+)-(%d+)-(%d+)-(%d+)")
            endTime = Lib.date2BeiJingTime({ year = year, month = month, day = day, hour = hour, min = min, sec = sec })
        end
        if item.titleLang == "#" then
            item.titleLang = ""
        end
        if item.descLang == "#" then
            item.descLang = ""
        end
        table.insert(ConfigList, {
            id = tonumber(item.id),
            type = tonumber(item.type),
            startTime = startTime,
            endTime = endTime,
            tabLang = item.tabLang,
            titleLang = item.titleLang,
            descLang = item.descLang,
            background = item.background,
            mainRewardId = tonumber(item.mainRewardId),
            rewardGroupId = tonumber(item.rewardGroupId),
            tabUIJson = item.tabUIJson or "CommonActivityTab.json",
            panelUIJson = item.panelUIJson or (DefaultPanelJson[tonumber(item.type)] or "CommonActivityPanel.json"),
            priceGroupId = tonumber(item.priceGroupId),
            chestGroupId = tonumber(item.chestGroupId),
            actor = item.actor,
            actorScale = tonumber(item.actorScale),
            actorYOffset = tonumber(item.actorYOffset),
            actorXOffset = tonumber(item.actorXOffset),
        })
    end
    CommonActivity:init(setting)
end

function CommonActivityConfig:getConfigList()
    return ConfigList
end

function CommonActivityConfig:getActivityById(id)
    for _, config in pairs(ConfigList) do
        if config.id == id then
            return config
        end
    end
end

init()