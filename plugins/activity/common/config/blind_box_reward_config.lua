---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/30 15:05
---
local CommonActivityRewardConfig = T(Config, "CommonActivityRewardConfig") ---@type CommonActivityRewardConfig
local RewardList = {}
local RewardWorth = {}

local function initRewardListConfig(config)
    for _, item in pairs(config) do
        local group = RewardList[item.blindBoxId] or {}
        table.insert(group, {
            id = tonumber(item.id),
            groupId = tonumber(item.groupId),
            hint = item.hint,
            lotteryCount = tonumber(item.lotteryCount),
            rewardGroup = CommonActivityRewardConfig:getRewardGroupById(item.groupId)
        })
        RewardList[item.blindBoxId] = group
    end
    for _, list in pairs(RewardList) do
        table.sort(list, function(a, b)
            return a.id < b.id
        end)
    end
end

local function initRewardWorthConfig(config)
    for _, item in pairs(config) do
        local group = RewardWorth[item.worthGroupId] or {}
        table.insert(group, {
            totalWorth = tonumber(item.totalWorth),
            percent = tonumber(item.percent),
        })
        RewardWorth[item.worthGroupId] = group
    end
    for _, group in pairs(RewardWorth) do
        table.sort(group, function(a, b)
            return a.totalWorth < b.totalWorth
        end)
    end
end

local function init()
    local path = Root.Instance():getGamePath() .. "config/common/BlindBoxRewardList.csv"
    local file = io.open(path, "r")
    if not file then
        return
    end
    initRewardListConfig(Lib.read_csv_file(path, 3))

    path = Root.Instance():getGamePath() .. "config/common/BlindBoxRewardWorth.csv"
    file = io.open(path, "r")
    if not file then
        return
    end
    initRewardWorthConfig(Lib.read_csv_file(path, 3))
end

init()

local BlindBoxRewardConfig = T(Config, "BlindBoxRewardConfig") ---@class BlindBoxRewardConfig

function BlindBoxRewardConfig:getRewardListByBlindBoxId(boxId)
    return RewardList[tostring(boxId)]
end

function BlindBoxRewardConfig:getRewardPercentByWorth(worthGroupId, worth)
    local group = RewardWorth[tostring(worthGroupId)]
    if not group or #group == 0 then
        worth = worth * 100
        return math.floor((math.random(1, 5000) + (math.random(worth / 2, worth) / worth) / 2)) / 100
    end
    local itemTag
    for _, item in pairs(group) do
        if item.totalWorth <= worth then
            itemTag = item
        end
        if item.totalWorth > worth then
            break
        end
    end
    if itemTag then
        return itemTag.percent
    end
    worth = worth * 100
    return math.floor((math.random(1, 5000) + (math.random(worth / 2, worth) / worth) / 2)) / 100
end