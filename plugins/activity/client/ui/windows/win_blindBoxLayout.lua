---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/16 11:09
---

local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
local CommonActivityRewardConfig = T(Config, "CommonActivityRewardConfig") ---@type CommonActivityRewardConfig
local BlindBoxConfig = T(Config, "BlindBoxConfig") ---@type BlindBoxConfig
local BlindBoxRewardConfig = T(Config, "BlindBoxRewardConfig") ---@type BlindBoxRewardConfig
local CommonActivityShowReward = T(UILib, "CommonActivityShowReward") ---@type CommonActivityShowReward
local CommonActivityRewardPreview = T(UILib, "CommonActivityRewardPreview") ---@type CommonActivityRewardPreview
local BlindBoxActivity = T(Lib, "BlindBoxActivity") ---@type BlindBoxActivity

local UI = UI ---@type UI

function M:init()
    WinBase.init(self, "BlindBoxLayout.json")
    self.items = {}
    self:initWnd()
    self:initEvent()
    LuaTimer:scheduleTimer(function()
        self:onSecondTick()
    end, 1000, 1000)
end

function M:initWnd()
    local llRoot = self:root()
    local llContent = self:child("BlindBoxLayout-Content")
    local height = math.min(llRoot:GetPixelSize().y, math.max(llContent:GetPixelSize().y, 692))
    local width = math.min((height / 692) * 1199, llRoot:GetPixelSize().x)
    llContent:SetWidth({ 0, width })
    llContent:SetHeight({ 0, height })

    self.btnBackClose = self:child("BlindBoxLayout-Back-Close")
    local tvTitle = self:child("BlindBoxLayout-Title")
    tvTitle:SetText(Lang:getMessage("blind.box.title"))
    self.ivClose = self:child("BlindBoxLayout-Close")
    self.btnHelp = self:child("BlindBoxLayout-Help")
    self.tvTime = self:child("BlindBoxLayout-Time")
    self.tvHint = self:child("BlindBoxLayout-Hint")
    self.tvHint:SetText(Lang:getMessage("blind.box.bottom.hint"))
    self.llBoxs = self:child("BlindBoxLayout-Boxs")
end

function M:initEvent()
    self:subscribe(self.btnBackClose, UIEvent.EventButtonClick, function()
        UI:closeWnd("blindBoxLayout")
    end)
    self:subscribe(self.ivClose, UIEvent.EventWindowClick, function()
        UI:closeWnd("blindBoxLayout")
    end)
    self:subscribe(self.btnHelp, UIEvent.EventButtonClick, function()
        UI:getWnd("commonActivityTextDialog"):showText("blind.box.help.title", "blind.box.help.content")
    end)

    Lib.subscribeEvent(Event.EventBlindBoxOpenResult, function(data)
        self:onBlindBoxOpenResult(data)
    end)
end

function M:isShowAnim()
    return false
end

function M:initBoxList(blindBoxList)
    UI:openWnd("blindBoxMain")
    self:clearBoxList()
    local width = self.llBoxs:GetPixelSize().x / 3
    for pos, blindBox in pairs(blindBoxList) do
        local config = BlindBoxConfig:getBlindBoxById(blindBox.boxId)
        if config then
            config.openTimes = blindBox.openTimes
            config.dayOpenTimes = blindBox.dayOpenTimes
            local item = UIMgr:new_widget("blindBoxItem")
            item:SetArea({ 0, (pos - 1) * width }, { 0, 0 }, { 0, width }, { 1, 0 })
            item:invoke("onDataChanged", config)
            self.items[config.id] = item
            self.llBoxs:AddChildWindow(item:invoke("get"):root())
        end
    end
end

function M:onBlindBoxEnd()
    if self:isShow() then
        CommonActivityRewardPreview.builder()
                                   .setTitleText("common.activity.tip.title")
                                   .setCenterTip(Lang:getMessage("common.activity.end.tip"))
                                   .show()
    end
    self:clearBoxList()
    UI:closeWnd("blindBoxMain")
    UI:closeWnd("blindBoxLayout")
    UI:closeWnd("blindBoxRewardList")
    UI:closeWnd("commonActivityTextDialog")
end

function M:resetBoxTimes()
    ---@param item GUIBlindBoxItem
    for _, item in pairs(self.items) do
        item.data.openTimes = 0
    end
end

function M:onSecondTick()
    if not self:isvisible() then
        return
    end
    if BlindBoxActivity:getBlindBoxInfo().lastTime >= Lib.getDaySeconds() then
        local text = string.format(Lang:getMessage("common.activity.day"),
                tostring(math.floor(BlindBoxActivity:getBlindBoxInfo().lastTime / Lib.getDaySeconds())))
        self.tvTime:SetText(text)
    else
        self.tvTime:SetText(Lib.getFormatTime(BlindBoxActivity:getBlindBoxInfo().lastTime))
    end
    ---@param item GUIBlindBoxItem
    for _, item in pairs(self.items) do
        item:invoke("updateTimeOrTimes")
    end
end

function M:clearBoxList()
    self.items = {}
    self.llBoxs:CleanupChildren()
end

function M:hide(force)
    if not force then
        return
    end
    self.super.hide(self)
end

function M:onBlindBoxOpenResult(data)
    ---计算魔方价值
    local worth = 0
    for _, item in pairs(data.results) do
        local reward = CommonActivityRewardConfig:getRewardById(item.rewardId)
        if reward then
            worth = worth + reward.price
        end
    end
    local config = BlindBoxConfig:getBlindBoxById(data.boxId)
    if not config then
        return
    end
    local percent = BlindBoxRewardConfig:getRewardPercentByWorth(config.worthGroupId, worth) .. "%"
    local text = string.format(Lang:getMessage("blind.box.reward.tip"), worth, percent)
    CommonActivityShowReward.builder()
                            .setBottomTip(text)
                            .setRewardView(data.results)
                            .setHideLeftButton()
                            .setRightButton("common.activity.sure")
                            .show()
    config.openTimes = data.openTimes
    config.dayOpenTimes = data.dayOpenTimes
    local item = self.items[data.boxId] ---@type GUIBlindBoxItem
    if item then
        item:invoke("updateTimeOrTimes")
    end
end