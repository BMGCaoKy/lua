---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/23 15:48
---
local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
local CommonActivityType = T(Config, "CommonActivityType") ---@type CommonActivityType
local CommonActivityRewardPreview = T(UILib, "CommonActivityRewardPreview") ---@type CommonActivityRewardPreview
local PanelCreator = {
    [CommonActivityType.MustLottery] = "mustLotteryPanel",
    [CommonActivityType.LuckyLottery] = "luckyLotteryPanel",
}
local UI = UI ---@type UI

function M:init()
    WinBase.init(self, "CommonActivityLayout.json")
    self:initWnd()
    self:initEvent()
    World.Timer(1, function()
        self:onTick()
        return true
    end)
end

function M:initWnd()
    local llRoot = self:root()
    local llContent = self:child("CommonActivityLayout-Content")
    local size = llContent:GetPixelSize()
    local width = math.min((size.y / 612) * 1124, llRoot:GetPixelSize().x)
    llContent:SetWidth({ 0, width })

    local tvTitle = self:child("CommonActivityLayout-Title")
    tvTitle:SetText(Lang:getMessage("common.activity.title"))
    self.btnBackClose = self:child("CommonActivityLayout-Back-Close")
    self.ivClose = self:child("CommonActivityLayout-Close")
    self.ivGCubeIcon = self:child("CommonActivityLayout-GCube-Icon")
    self.tvGCube = self:child("CommonActivityLayout-GCube-Value")

    local llTabs = self:child("CommonActivityLayout-Tabs")
    self.lvTabs = UIMgr:new_widget("list_view", llTabs)
    self.lvTabs:invoke("ITEM_SPACE", 4)
    self.llPanels = self:child("CommonActivityLayout-Panels")
    self.panels = {}

    self.llTip = self:child("CommonActivityLayout-Tip")
    self.tvTipText = self:child("CommonActivityLayout-Tip-Text")
    self.llTip:SetVisible(false)
end

function M:initEvent()
    self:subscribe(self.btnBackClose, UIEvent.EventButtonClick, function()
        Lib.emitEvent(Event.EventCommonActivityLayoutHide)
        UI:closeWnd("commonActivityLayout")
    end)

    self:subscribe(self.ivClose, UIEvent.EventWindowClick, function()
        Lib.emitEvent(Event.EventCommonActivityLayoutHide)
        UI:closeWnd("commonActivityLayout")
    end)

    self:subscribe(self.ivGCubeIcon, UIEvent.EventWindowClick, function()
        Interface.onRecharge(1)
    end)

    Lib.subscribeEvent(Event.EVENT_CHANGE_CURRENCY, function()
        self:changeCurrency()
    end)
    Lib.subscribeEvent(Event.EventCommonActivityCheckRedPoint, function(activityId)
        self:checkRedPoint(activityId)
    end)

    Lib.subscribeEvent(Event.EventTipNeedBackPack, function(activityId)
        CommonActivityRewardPreview.builder()
                                   .setCenterTip(Lang:getString("common.activity.tip.needBackPack"))
                                   .setTitleText(Lang:getString("common.activity.tip.title"))
                                   .show()
    end)
end

function M:changeCurrency()
    local wallet = Me:data("wallet")
    if wallet["gDiamonds"] then
        self.tvGCube:SetText(wallet["gDiamonds"].count or 0)
    end
end

function M:onTick()
    if not self:isvisible() then
        return
    end
    for _, panel in pairs(self.panels) do
        if panel:isvisible() then
            panel:onTick()
        end
    end
end

function M:showActivity(activityId)
    local count = self.lvTabs:invoke("CHILD_COUNT")
    if count == 0 then
        return
    end
    for index = 1, count do
        local tab = self.lvTabs:invoke("GET_LUA_ITEM", index - 1)
        if tab then
            tab:setSelected(tab.activityId == activityId)
        end
    end
    for _activityId, panel in pairs(self.panels) do
        panel:root():SetVisible(activityId == _activityId)
        if panel:isvisible() then
            panel:onShow()
        end
    end
end

function M:trySelectFirst()
    local count = self.lvTabs:invoke("CHILD_COUNT")
    if count <= 0 then
        return
    end
    local tab = self.lvTabs:invoke("GET_LUA_ITEM", 0)
    self:showActivity(tab.activityId)
end

function M:addActivity(activity)
    UI:openWnd("commonActivityMain")
    local tab = UIMgr:new_widget("commonActivityTab", activity.tabUIJson):invoke("get")
    tab:onDataChanged(activity)
    self.lvTabs:invoke("ITEM", tab:root())

    local creator = PanelCreator[activity.type] or "commonActivityPanel"
    local panel = UIMgr:new_widget(creator, activity.panelUIJson, activity):invoke("get")
    if panel:root() then
        self.llPanels:AddChildWindow(panel:root())
        self.panels[activity.id] = panel
    end

    if self.lvTabs:invoke("CHILD_COUNT") == 1 then
        self:trySelectFirst()
    end
end

function M:removeActivity(activity)
    local tab, pos = self.lvTabs:invoke("getItem", "activityId", activity.id)
    if not tab then
        return
    end
    local needChangeSelected = tab:isSelected()
    self.lvTabs:invoke("REMOVE_ITEM", pos)

    local panel = self.panels[activity.id]
    if panel then
        GUIWindowManager.instance:DestroyGUIWindow(panel:root())
        self.panels[activity.id] = nil
    end

    if needChangeSelected then
        self:trySelectFirst()
        CommonActivityRewardPreview.builder()
                                   .setTitleText("common.activity.tip.title")
                                   .setCenterTip(Lang:getString("common.activity.end.tip"))
                                   .show()
    end

    if self.lvTabs:getItemCount() == 0 then
        UI:closeWnd("commonActivityMain")
        UI:closeWnd("commonActivityLayout")
        UI:closeWnd("commonActivityTextDialog")
    end
end

function M:showTip(tip, duration)
    duration = duration or 1500
    tip = Lang:getMessage(tip)
    self.tvTipText:SetText(tip)
    self.llTip:SetWidth({ 0, self.tvTipText:GetFont():GetTextExtent(tip, 1) + 50 })
    self.llTip:SetVisible(true)
    LuaTimer:cancel(self.tipTimer)
    self.tipTimer = LuaTimer:schedule(function()
        self.llTip:SetVisible(false)
    end, duration)
end

function M:checkRedPoint(activityId)
    LuaTimer:schedule(function()
        for _activityId, panel in pairs(self.panels) do
            if activityId == nil or activityId == _activityId then
                if panel:isNeedRedPoint() then
                    local count = self.lvTabs:invoke("CHILD_COUNT")
                    if count > 0 then
                        local len = count - 1
                        for i = 0,len  do
                            local tab = self.lvTabs:invoke("GET_LUA_ITEM", i)
                            if tab.activityId == _activityId then
                                if not tab:isSelected() or not self:isvisible() then
                                    tab:setRedPoint(true)
                                end
                            end
                        end
                    end
                end
            end
        end
    end, 1)

    if not self:isvisible() then
        UI:getWnd("commonActivityMain"):checkTabsRedPoint()
    end
end

function M:isHaveRedPoint()
    local count = self.lvTabs:invoke("CHILD_COUNT")
    if count <= 0 then
        return false
    end
    local len = count - 1
    for i = 0,len  do
        local tab = self.lvTabs:invoke("GET_LUA_ITEM", i)
        if tab:isHaveRedPoint() == true then
            return true
        end
    end
    return false
end