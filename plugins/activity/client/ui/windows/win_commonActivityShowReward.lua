---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/23 15:49
---
local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
local CommonActivityRewardConfig = T(Config, "CommonActivityRewardConfig") ---@type CommonActivityRewardConfig

function M:init()
    WinBase.init(self, "CommonActivityShowReward.json")
    self:initWnd()
    self:initEvent()
end

function M:initWnd()
    self.contents = {}
    self.contentView = nil
    self.customParams = nil
    self.leftClickListener = nil
    self.rightClickListener = nil
    self.closeClickListener = nil

    self.llRewardBox = self:child("CommonActivityShowReward-Reward-Box")
    self.llRewards = self:child("CommonActivityShowReward-Rewards")

    self.tvTitleText = self:child("CommonActivityShowReward-Title")
    self.tvBottomTip = self:child("CommonActivityShowReward-Bottom-Tip")

    self.btnLeftButton = self:child("CommonActivityShowReward-Left")
    self.btnRightButton = self:child("CommonActivityShowReward-Right")
    self.tvLeftBtnText = self:child("CommonActivityShowReward-Left-Text")
    self.tvRightBtnText = self:child("CommonActivityShowReward-Right-Text")

    self.ivLeftIcon = self:child("CommonActivityShowReward-Left-Money-Icon")
    self.ivRightIcon = self:child("CommonActivityShowReward-Right-Money-Icon")
    self.tvLeftBtnPrice = self:child("CommonActivityShowReward-Left-Price")
    self.tvRightBtnPrice = self:child("CommonActivityShowReward-Right-Price")

    self.leftButtonPos = self.btnLeftButton:GetXPosition()
    self.rightButtonPos = self.btnRightButton:GetXPosition()
end

function M:initEvent()
    self:subscribe(self.btnLeftButton, UIEvent.EventButtonClick, function()
        if self.leftClickListener ~= nil then
            local close = self.leftClickListener() ---返回true拦截dialog不关闭
            if not close then
                self:close()
            end
        else
            self:close()
        end
    end)
    self:subscribe(self.btnRightButton, UIEvent.EventButtonClick, function()
        if self.rightClickListener ~= nil then
            local close = self.rightClickListener() ---返回true拦截dialog不关闭
            if not close then
                self:close()
            end
        else
            self:close()
        end
    end)
end

function M:isShowAnim()
    return true
end

function M:setAlwaysOnTop(isTop)
    return self:root():SetAlwaysOnTop(isTop)
end

function M:setDefault()
    self.customParams = nil
    self.leftClickListener = nil
    self.rightClickListener = nil
    self.closeClickListener = nil

    self.llRewards:CleanupChildren()

    LuaTimer:cancel(self.showRewardKey)
    self.tvTitleText:SetText(Lang:getMessage("common.activity.showReward.title"))
    self.tvBottomTip:SetVisible(false)

    self:setLeftButton(Lang:getMessage("common.activity.tip.tryAgain"))
    self.ivLeftIcon:SetVisible(false)
    self.tvLeftBtnPrice:SetText("")

    self:setRightButton(Lang:getMessage("common.activity.sure"))
    self.ivRightIcon:SetVisible(false)
    self.tvRightBtnPrice:SetText("")
end

function M:close()
    if self:isvisible() then
        UI:closeWnd("commonActivityShowReward")
        self:onHide()
    end
end

function M:onHide()
    self:setDefault()
end

function M:builder()
    self:setDefault()
end

function M:addRewardListItem(rewardList, allRewardCount, isOneReward)
    LuaTimer:cancel(self.showRewardKey)
    allRewardCount = allRewardCount or #rewardList
    local size = math.min(84, (self.llRewardBox:GetPixelSize().x - (allRewardCount - 1) * 22 - 20))
    if isOneReward == nil then
        isOneReward = #rewardList == 1
    end
    local lineCount = 6
    if allRewardCount > 6 then
        lineCount = math.floor((allRewardCount / 2) + 0.5)
    end

    local function addItem(item)
        local count = self.llRewards:GetChildCount()
        local col = count % lineCount
        local row = math.floor(count / lineCount)
        item:SetArea({ 0, col * (size + 22) }, { 0, row * (size + 28) }, { 0, size }, { 0, size })
        self.llRewards:AddChildWindow(item)
    end

    local fun = function()
        local rewardInfo = table.remove(rewardList, 1)
        if rewardInfo then
            ---展示大奖
            if rewardInfo.type and rewardInfo.type == "extra" then
                local rewardItem = UIMgr:new_widget("commonActivityRewardItem")
                rewardItem:invoke("setLuckyValue", rewardInfo)
                addItem(rewardItem)
            else
                local reward = CommonActivityRewardConfig:getRewardById(rewardInfo.rewardId)
                if reward then
                    if rewardInfo.isGrandPrize == true then
                        LuaTimer:cancel(self.showRewardKey)
                        UI:getWnd("commonActivityGrandPrize"):initReward(reward, function()
                            self:addRewardListItem(rewardList, allRewardCount, isOneReward)
                        end)
                        if isOneReward then
                            LuaTimer:schedule(function()
                                self:hide()
                            end, 1)
                        end
                    end
                    ---添加小图标
                    local rewardItem = UIMgr:new_widget("commonActivityRewardItem")
                    rewardItem:invoke("setLotteryResult", reward)
                    addItem(rewardItem)
                end
            end
        end
    end

    if isOneReward then
        fun()
    else
        self.showRewardKey = LuaTimer:scheduleTimer(fun, 150, #rewardList)
    end
end

function M:setRewardView(rewardList)
    UI:getWnd("commonActivityGrandPrize"):removeCallBack()
    local rewardNum = #rewardList
    local col = 6
    if rewardNum > 6 then
        col = math.floor((rewardNum / 2) + 0.5)
    end
    local size = math.min(84, (self.llRewardBox:GetPixelSize().x - (rewardNum - 1) * 22) / math.min(col, rewardNum)) + 22
    local height = math.ceil(rewardNum / col) * 84 + (math.ceil(rewardNum / col) - 1) * 28
    self.llRewards:SetArea({ 0, 0 }, { 0, 0 }, { 0, (size * math.min(col, rewardNum)) - 22 }, { 0, height })

    self.btnLeftButton:SetTouchable(false)
    self.btnRightButton:SetTouchable(false)
    LuaTimer:cancel(self.btnKey)
    self.btnKey = LuaTimer:schedule(function()
        self.btnLeftButton:SetTouchable(true)
        self.btnRightButton:SetTouchable(true)
    end, 150 * rewardNum)

    self:addRewardListItem(rewardList)
end

function M:setUI()
    if self.btnLeftButton:IsVisible() and self.btnRightButton:IsVisible() then
        self.btnLeftButton:SetXPosition(self.leftButtonPos)
        self.btnRightButton:SetXPosition(self.rightButtonPos)
    elseif self.btnLeftButton:IsVisible() then
        self.btnLeftButton:SetXPosition({ 0, 0 })
    elseif self.btnRightButton:IsVisible() then
        self.btnRightButton:SetXPosition({ 0, 0 })
    end
    if self.tvBottomTip:IsVisible() then
        self.llRewards:SetYPosition({ 0, -20 })
    else
        self.llRewards:SetYPosition({ 0, 0 })
    end
end

function M:setLeftButton(text, icon, price)
    if not text or #text == 0 then
        self.tvLeftBtnText:SetText("")
        self.btnLeftButton:SetVisible(false)
    else
        self.btnLeftButton:SetVisible(true)
        self.tvLeftBtnText:SetText(Lang:getMessage(text))
    end
    if not icon or #icon == 0 then
        self.ivLeftIcon:SetVisible(false)
        self.ivLeftIcon:SetImage("")
        self.tvLeftBtnPrice:SetText("")
    else
        self.ivLeftIcon:SetVisible(true)
        self.ivLeftIcon:SetImage(icon)
        self.tvLeftBtnPrice:SetText(price)
    end
end

function M:setRightButton(text, icon, price)
    if not text or #text == 0 then
        self.tvRightBtnText:SetText("")
        self.btnRightButton:SetVisible(false)
    else
        self.btnRightButton:SetVisible(true)
        self.tvRightBtnText:SetText(Lang:getMessage(text))
    end
    if not icon or #icon == 0 then
        self.ivRightIcon:SetVisible(false)
        self.ivRightIcon:SetImage("")
        self.tvRightBtnPrice:SetText("")
    else
        self.ivRightIcon:SetVisible(true)
        self.ivRightIcon:SetImage(icon)
        self.tvRightBtnPrice:SetText(price)
    end
end

local CommonActivityShowReward = T(UILib, "CommonActivityShowReward") ---@class CommonActivityShowReward

---构造一个初始化状态的自定义奖励界面
function CommonActivityShowReward.builder()
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog:builder()
    return CommonActivityShowReward
end

---设置奖励界面标题(默认是：提示)
---@text string 标题多语言或标题
function CommonActivityShowReward.setTitleText(title)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog.tvTitleText:SetText(Lang:getMessage(title))
    return CommonActivityShowReward
end

function CommonActivityShowReward.setBottomTip(tip)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog.tvBottomTip:SetVisible(true)
    dialog.tvBottomTip:SetText(tip)
    return CommonActivityShowReward
end

---设置奖励界面奖励详情
---详情需要传入一个rewardId的列表
---@param rewardList table rewardId列表
function CommonActivityShowReward.setRewardView(rewardList)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog:setRewardView(rewardList)
    return CommonActivityShowReward
end

---设置奖励界面奖励详情
---详情需要传入一个reward的列表
---@param groupId number groupId
function CommonActivityShowReward.setRewardGroup(groupId)
    local dialog = UI:getWnd("commonActivityShowReward")
    local group = CommonActivityRewardConfig:getRewardGroupById(groupId)
    if not group then
        return CommonActivityShowReward
    end
    local result = {}
    for _, item in pairs(group) do
        table.insert(result, { rewardId = item.reward.rewardId, isGrandPrize = item.isGrandPrize })
    end
    dialog:setRewardView(result)
    return CommonActivityShowReward
end

---设置奖励界面右按钮信息
---@param text string 文字多语言或文字
---@param icon string 图片名称
---@param price string 价格
function CommonActivityShowReward.setRightButton(text, icon, price)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog:setRightButton(text, icon, price)
    return CommonActivityShowReward
end

---设置奖励界面左按钮信息
---@param text string 文字多语言或文字
---@param icon string 图片名称
---@param price string 价格
function CommonActivityShowReward.setLeftButton(text, icon, price)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog:setLeftButton(text, icon, price)
    return CommonActivityShowReward
end

---设置奖励界面左按钮点击监听
---@param listener function 监听回调函数
function CommonActivityShowReward.setLeftClickListener(listener)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog.leftClickListener = listener
    return CommonActivityShowReward
end

---设置奖励界面右按钮点击监听
---@param listener function 监听回调函数
function CommonActivityShowReward.setRightClickListener(listener)
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog.rightClickListener = listener
    return CommonActivityShowReward
end

---显示奖励界面
function CommonActivityShowReward.show()
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog:setUI()
    UI:openWnd("commonActivityShowReward")
end

---关闭奖励界面
function CommonActivityShowReward.hide()
    UI:closeWnd("commonActivityShowReward")
end

function CommonActivityShowReward.isShow()
    return UI:isOpen("commonActivityShowReward")
end

---设置奖励界面(隐藏左按钮，右按钮且居中)
function CommonActivityShowReward.setHideLeftButton()
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog.btnLeftButton:SetVisible(false)
    dialog.btnRightButton:SetHorizontalAlignment(1)
    dialog.btnRightButton:SetXPosition({ 0, 0 })
    return CommonActivityShowReward
end

---设置奖励界面(隐藏右按钮，左按钮且居中)
function CommonActivityShowReward.setHideRightButton()
    local dialog = UI:getWnd("commonActivityShowReward")
    dialog.btnRightButton:SetVisible(false)
    dialog.btnLeftButton:SetHorizontalAlignment(1)
    dialog.btnLeftButton:SetXPosition({ 0, 0 })
    return CommonActivityShowReward
end

---设置奖励界面是否显示在最前
function CommonActivityShowReward.setAlwaysOnTop(isTop)
    local dialog = UI:getWnd("commonActivityShowReward")
    return dialog:setAlwaysOnTop(isTop)
end