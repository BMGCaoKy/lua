---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/11/17 10:38
---
local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
local CommonActivityRewardConfig = T(Config, "CommonActivityRewardConfig") ---@type CommonActivityRewardConfig
local LuckyLotteryPriceConfig = T(Config, "LuckyLotteryPriceConfig") ---@type LuckyLotteryPriceConfig
local LuckyValueConfig = T(Config, "LuckyValueConfig") ---@type LuckyLotteryPriceConfig
local CommonActivityShowReward = T(UILib, "CommonActivityShowReward") ---@type CommonActivityShowReward

local widget_panel = require "ui.widget.widget_commonActivityPanel"
local M = Lib.derive(widget_panel)

function M:init(name, activity)
    widget_panel.init(self, name, activity)
end

function M:onChildLoad()
    local name = self.__name:gsub(".json", "-")
    self.llRewardShow = self:child(name .. "Reward-Show")
    self.llRewardAll = self:child(name .. "Reward-All")
    self.llRewardRange = self:child(name .. "Reward-Range")
    self.llClickBox = self:child(name .. "Click-Box")

    self.stLuckyText = self:child(name .. "Lucky-Text")
    self.stLuckyValue = self:child(name .. "Lucky-Value")
    self.siLuckyBg = self:child(name .. "Lucky-Bg")
    self.siLuckyStart1 = self:child(name .. "Lucky-Star-1")
    self.siLuckyStart2 = self:child(name .. "Lucky-Star-2")
    self.siLuckyStart3 = self:child(name .. "Lucky-Star-3")

    self.siRewardShowView = self:child(name .. "Reward-Show-View-Bg")
    self.siRewardShowViewTip = self:child(name .. "Reward-Show-View-Tip")
    self.siRewardBackShow = self:child(name .. "Reward-Back-Show-Bg")
    self.siRewardBackShowTip = self:child(name .. "Reward-Back-Show-Tip")

    self.stRewardShowViewTip = self:child(name .. "Reward-Show-View-Tip")
    self.stRewardBackShowTip = self:child(name .. "Reward-Back-Show-Tip")

    self.btnLeft = self:child(name .. "Left-Btn")
    self.siLeftOffBg = self:child(name .. "Left-Btn-Off-Bg")
    self.siLeftCoolDownIcon = self:child(name .. "Left-Btn-CoolDown-Icon")
    self.stLeftOffValue = self:child(name .. "Left-Btn-Off-Value")
    self.stLeftBtnTopText = self:child(name .. "Left-Btn-TopText")
    self.stLeftBtnValue = self:child(name .. "Left-Btn-Value")
    self.stLeftBtnPrice = self:child(name .. "Left-Btn-Price")
    self.stLeftBtnCoolDownText = self:child(name .. "Left-Btn-CoolDown-Text")

    self.btnRight = self:child(name .. "Right-Btn")
    self.stRightBtnTopText = self:child(name .. "Right-Btn-TopText")
    self.stRightBtnValue = self:child(name .. "Right-Btn-Value")
    self.stRightBtnPrice = self:child(name .. "Right-Btn-Price")

    self.stLuckyText:SetText(Lang:getMessage("lucky.lottery.ui.luckyValue"))
    self.siRewardShowViewTip:SetText(Lang:getMessage("lucky.lottery.ui.showView"))
    self.siRewardBackShowTip:SetText(Lang:getMessage("lucky.lottery.ui.backShow"))

    self.llRewardAll:SetVisible(false)
    self.siLeftOffBg:SetVisible(false)
    self.siLeftCoolDownIcon:SetVisible(false)

    self.wFloatReward = UIMgr:new_widget("commonActivityRewardFloat"):invoke("get")
    self:root():AddChildWindow(self.wFloatReward:root())

    self:initEvent()
end

function M:initEvent()
    self:subscribe(self.btnLeft, UIEvent.EventButtonClick, function()
        self:onLottery(1)
    end)

    self:subscribe(self.btnRight, UIEvent.EventButtonClick, function()
        self:onLottery(2)
    end)

    self:subscribe(self.siRewardShowView, UIEvent.EventWindowClick, function()
        self.llRewardShow:SetVisible(false)
        self.llRewardAll:SetVisible(true)
    end)

    self:subscribe(self.llClickBox, UIEvent.EventWindowClick, function()
        self.llRewardShow:SetVisible(false)
        self.llRewardAll:SetVisible(true)
    end)

    self:subscribe(self.siRewardBackShow, UIEvent.EventWindowClick, function()
        self.llRewardShow:SetVisible(true)
        self.llRewardAll:SetVisible(false)
    end)

    self:subscribe(self.siLuckyBg, UIEvent.EventWindowClick, function()
        self.wFloatReward:showDesc("lucky.lottery.ui.desc", self.siLuckyBg)
        self.wFloatRewardNeedShow = true
    end)

    Lib.subscribeEvent(Event.EventLuckyLotteryResult, function(data)
        self:showLotteryResult(data)
    end)
    Lib.subscribeEvent(Event.EventLuckyLotteryDiscountCd, function(data)
        self.activity.discountCd = tonumber(data.discountCd)
        self:setSingleDrawPrice()
        self:setTenDrawPrice()
    end)
    Lib.subscribeEvent(Event.EventCommonActivityLayoutHide, function()
        self.wFloatReward:hide()
    end)
    Lib.subscribeEvent(Event.EventTipNeedBackPack, function()
        self.btnLeft:SetTouchable(true)
        self.btnRight:SetTouchable(true)
    end)
end

function M:onShow()
    self.wFloatReward:hide()
    if self.isInit then
        return
    end
    self.isInit = true
    self:initList(self.activity.rewardGroupId or 2)
    self:setSingleDrawPrice()
    self:setTenDrawPrice()
    self:setLuckValue(self.activity.luckyValue)
end

function M:setSingleDrawPrice()
    ---设置单抽价格
    local priceConfig = LuckyLotteryPriceConfig:getPriceConfigByGroupId(self.activity.priceGroupId)
    local config = priceConfig[1]
    if not config then
        return
    end

    self.siLeftOffBg:SetVisible(false)
    self.siLeftCoolDownIcon:SetVisible(false)
    self.stLeftBtnValue:SetText("")
    self.stLeftBtnPrice:SetText(config.price)
    self.stLeftBtnTopText:SetText(Lang:getMessage(config.priceLang))

    if not self.activity.discountCd then
        return
    end

    if config.price > config.discountPrice and self.activity.discountCd <= 0 then
        self.siLeftOffBg:SetVisible(true)
        self.stLeftOffValue:SetText(math.ceil((config.discountPrice / config.price) * 100) .. "%")
        self.stLeftBtnValue:SetText(config.price)
        self.stLeftBtnPrice:SetText(config.discountPrice)
        self.stLeftBtnValue:SetWidth({ 0, self.stLeftBtnValue:GetFont():GetTextExtent(config.price, 1) })
    elseif config.price > config.discountPrice and self.activity.discountCd > 0 then
        self.siLeftCoolDownIcon:SetVisible(true)
        self.stLeftBtnValue:SetWidth({ 0, 0 })
        LuaTimer:cancel(self.LeftBtnKey)
        self.stLeftBtnCoolDownText:SetText(Lib.getFormatTime(self.activity.discountCd))

        self.LeftBtnKey = LuaTimer:scheduleTimer(function()
            self.activity.discountCd = self.activity.discountCd - 1
            if self.activity.discountCd <= 0 then
                self.siLeftCoolDownIcon:SetVisible(false)
                self.siLeftOffBg:SetVisible(true)
                self.stLeftOffValue:SetText(math.ceil((config.discountPrice / config.price) * 100) .. "%")
                self.stLeftBtnValue:SetText(config.price)
                self.stLeftBtnPrice:SetText(config.discountPrice)
                self.stLeftBtnValue:SetWidth({ 0, self.stLeftBtnValue:GetFont():GetTextExtent(config.price, 1) })
                Lib.emitEvent(Event.EventCommonActivityCheckRedPoint, self.activity.id)
            else
                self.stLeftBtnCoolDownText:SetText(Lib.getFormatTime(self.activity.discountCd))
            end
        end, 1000, self.activity.discountCd + 1)
        self:addTimer(self.LeftBtnKey)
    end
end

function M:setTenDrawPrice()
    ---设置十连价格
    local priceConfig = LuckyLotteryPriceConfig:getPriceConfigByGroupId(self.activity.priceGroupId)
    local config = priceConfig[2]
    if not config then
        return
    end
    self.stRightBtnValue:SetText("")
    self.stRightBtnPrice:SetText(config.discountPrice)
    self.stRightBtnTopText:SetText(Lang:getMessage(config.priceLang))

    if config.price > config.discountPrice then
        self.stRightBtnValue:SetText(config.price)
        self.stRightBtnValue:SetWidth({ 0, self.stRightBtnValue:GetFont():GetTextExtent(config.price, 1) })
    else
        self.stRightBtnValue:SetWidth({ 0, 0 })
    end
end

function M:initList(groupId)
    local rewardGroup = CommonActivityRewardConfig:getRewardGroupById(groupId)
    if not rewardGroup then
        return
    end
    local lvRewardList = UIMgr:new_widget("list_view", self.llRewardRange)
    lvRewardList:SetArea({ 0, 0 }, { 0, 0 }, { 1, 0 }, { 1, 0 })
    local container = GUIWindowManager.instance:CreateGUIWindow1("LuckyTurntablePanel-Reward-List-Container")
    local row = 1
    if #rewardGroup % 4 == 0 then
        row = #rewardGroup / 4
    else
        row = math.floor(#rewardGroup / 4) + 1
    end
    local size = (self.llRewardRange:GetPixelSize().x - 30) / 4
    container:SetWidth({ 0, self.llRewardRange:GetPixelSize().x })
    container:SetHeight({ 0, row * size + (row - 1) * 8 })
    lvRewardList:AddItem(container)
    for _, reward in pairs(rewardGroup) do
        local count = container:GetChildCount()
        local rewardItem = UIMgr:new_widget("commonActivityRewardItem", self)
        rewardItem:invoke("setRewardData", reward.reward)
        rewardItem:SetArea({ 0, (size + 10) * (count % 4) }, { 0, (size + 8) * math.floor((count / 4)) }, { 0, size }, { 0, size })
        rewardItem:invoke("SetEffectMask", "set:common_activity.json image:img_9_mask_lucky")
        container:AddChildWindow(rewardItem)
    end
end

function M:setLuckValue(luckyValue)
    ---设置幸运值数值和等级
    self.activity.luckyValue = luckyValue
    local stars = LuckyValueConfig:getStarsByLuckyValue(luckyValue)
    self.stLuckyValue:SetText(luckyValue)
    if stars == 0 then
        self.siLuckyStart1:SetImage("set:common_activity.json image:img_9_luckystar_dark")
        self.siLuckyStart2:SetImage("set:common_activity.json image:img_9_luckystar_dark")
        self.siLuckyStart3:SetImage("set:common_activity.json image:img_9_luckystar_dark")
    elseif stars == 1 then
        self.siLuckyStart1:SetImage("set:common_activity.json image:img_9_luckystar_light")
        self.siLuckyStart2:SetImage("set:common_activity.json image:img_9_luckystar_dark")
        self.siLuckyStart3:SetImage("set:common_activity.json image:img_9_luckystar_dark")
    elseif stars == 2 then
        self.siLuckyStart1:SetImage("set:common_activity.json image:img_9_luckystar_light")
        self.siLuckyStart2:SetImage("set:common_activity.json image:img_9_luckystar_light")
        self.siLuckyStart3:SetImage("set:common_activity.json image:img_9_luckystar_dark")
    elseif stars == 3 then
        self.siLuckyStart1:SetImage("set:common_activity.json image:img_9_luckystar_light")
        self.siLuckyStart2:SetImage("set:common_activity.json image:img_9_luckystar_light")
        self.siLuckyStart3:SetImage("set:common_activity.json image:img_9_luckystar_light")
    end
end

function M:clickItem(item)
    self.wFloatReward:showReward(item.reward, item:root())
end

function M:onLottery(type)
    local priceConfigGroup = LuckyLotteryPriceConfig:getPriceConfigByGroupId(self.activity.priceGroupId)
    local priceConfig = priceConfigGroup[type]
    local realPrice = LuckyLotteryPriceConfig:getDisCountPrice(self.activity.priceGroupId, type, self.activity.discountCd)
    if Lib.checkMoney(Me, priceConfig.moneyType, realPrice) then
        self.lotteryTimer = LuaTimer:schedule(function()
            self.btnLeft:SetTouchable(true)
            self.btnRight:SetTouchable(true)
        end, 8000)
        self:addTimer(self.lotteryTimer)
        self.btnLeft:SetTouchable(false)
        self.btnRight:SetTouchable(false)
        local data = {}
        data.activityId = self.activity.id
        data.type = type
        Me:sendPacket({ pid = "LuckyLottery", data = data })
    end
end

function M:showLotteryResult(data)
    LuaTimer:cancel(self.lotteryTimer)
    if tonumber(data.discountCd) >= 0 then
        self.activity.discountCd = data.discountCd
    end
    self.activity.lotteryTimes = data.lotteryTimes
    self:setLuckValue(data.luckyValue)
    self:setSingleDrawPrice()
    self:setTenDrawPrice()
    self.btnLeft:SetTouchable(true)
    self.btnRight:SetTouchable(true)

    local priceConfig = LuckyLotteryPriceConfig:getPriceConfigByGroupId(self.activity.priceGroupId)
    local config = priceConfig[tonumber(data.type)]
    if not config then
        return
    end

    if data.results and #data.results > 1 then
        local specialReward = { type = "extra", image = "", quality = "lucky", numLang = tostring(#data.results) }
        table.insert(data.results, specialReward)
    end
    CommonActivityShowReward.builder()
                            .setRewardView(data.results)
                            .setLeftButton("common.activity.tip.tryAgain", config.moneyImage, config.price)
                            .setRightButton("common.activity.sure")
                            .setLeftClickListener(function()
        self:onLottery(data.type)
    end)
                            .show()
end

function M:isNeedRedPoint()
    local isShowRed = false
    local priceConfig = LuckyLotteryPriceConfig:getPriceConfigByGroupId(self.activity.priceGroupId)
    local config = priceConfig[1]
    if config ~= nil then
        if config.price > config.discountPrice and self.activity.discountCd <= 0 then
            isShowRed = true
        end
    end

    local chestGroup = CommonActivityChestConfig:getChestGroupById(self.activity.chestGroupId)
    local getChest = Lib.splitString(self.activity.getChest or "", ",")
    if chestGroup then
        for _, chest in pairs(chestGroup.chests) do
            if self.activity.lotteryTimes >= chest.times and not Lib.tableContain(getChest, chest.chestId) then
                isShowRed = true
                break
            end
        end
    end
    return isShowRed
end

return M