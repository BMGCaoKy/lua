---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/23 15:51
---
local CommonActivityChestConfig = T(Config, "CommonActivityChestConfig") ---@type CommonActivityChestConfig
local CommonActivityShowReward = T(UILib, "CommonActivityShowReward") ---@type CommonActivityShowReward

local widget_base = require "ui.widget.widget_base"
local M = Lib.derive(widget_base)

function M:init(activity, parent)
    widget_base.init(self, "CommonActivityChestGroup.json")
    self.activity = activity
    self.parent = parent
    self:initWnd()
    self:initEvent()
end

function M:initWnd()
    self:root():SetLevel(51)
    self:root():SetVerticalAlignment(1)
    self:root():SetHorizontalAlignment(2)
    self.llRoot = self:root()
    self.tvTitle = self:child("CommonActivityChestGroup-Title")
    self.tvTimes = self:child("CommonActivityChestGroup-Times")
    local llLayout = self:child("CommonActivityChestGroup-Chests")
    self.lvChests = UIMgr:new_widget("list_view", llLayout)
    local group = CommonActivityChestConfig:getChestGroupById(self.activity.chestGroupId)
    for _, chest in pairs(group.chests) do
        local item = UIMgr:new_widget("commonActivityChest", self.activity)
        item:invoke("onDataChanged", chest)
        self.lvChests:invoke("ITEM", item)
    end
    self.lvChests:SetYPosition({ 0, 4 })
    local maxHeight = self.parent:root():GetPixelSize().y
    local height = math.min(#group.chests * 92 + 78, maxHeight)
    self:root():SetHeight({ 0, height })
    self.llRoot:SetBackImage(group.background)
    self.parent:root():AddChildWindow(self:root())
    self:root():SetYPosition({ 0, -(maxHeight - height) / 20 })
    self.tvTitle:SetText(Lang:getMessage("common.activity.chest.reward"))
end

function M:initEvent()
    Lib.subscribeEvent(Event.EventCommonActivityOpenChestResult, function(data)
        if data.activityId ~= self.activity.id then
            return
        end
        self.activity.getChest = self.activity.getChest .. "," .. data.chestId
        self:updateChests()
        local chest = CommonActivityChestConfig:getChestById(data.chestId)
        if not chest then
            return
        end
        CommonActivityShowReward.builder()
                                .setRewardGroup(chest.rewardGroupId)
                                .setHideLeftButton()
                                .setRightButton("common.activity.sure")
                                .show()
    end)
    Lib.subscribeEvent(Event.EventCommonActivityRefreshChest, function(data)
        if data.activityId ~= self.activity.id then
            return
        end
        self.activity.getChest = data.getChest
        self.activity.lotteryTimes = data.lotteryTimes
        self:updateChests()
    end)
end

function M:onTick()
    self.tvTimes:SetText(string.format(Lang:getMessage("common.activity.times"), "â–¢FFFFED7C" .. (self.activity.lotteryTimes or 0)))
    if self.updateLotteryTimes ~= self.activity.lotteryTimes then
        self:updateChests()
    end
end

function M:updateChests()
    local count = self.lvChests:invoke("CHILD_COUNT")
    if count == 0 then
        return
    end
    for index = 1, count do
        local item = self.lvChests:invoke("GET_LUA_ITEM", index - 1)
        if item then
            item:updateChest()
        end
    end
    self.updateLotteryTimes = self.activity.lotteryTimes
    Lib.emitEvent(Event.EventCommonActivityCheckRedPoint, self.activity.id)
end

return M