---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/11/23 14:28
---
local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
local ActivityLib = T(Lib, "ActivityLib") ---@type ActivityLib

local function initClientUI(setting)
    local main = UI:getWnd("commonActivityMain")
    ActivityLib.setGUIBySetting(main, setting.MainUI, "child")

    local layout = UI:getWnd("commonActivityLayout")
    ActivityLib.setGUIBySetting(layout, setting.LayoutUI, "child")

    LuaTimer:schedule(function()
        UI:getWnd("commonActivityTextDialog")
        UI:getWnd("commonActivityShowReward")
        UI:getWnd("commonActivityRewardPreview")
        UI:getWnd("commonActivityGrandPrize")
    end, 20)
end

-------------------------------------------华丽的分割线-------------------------------------------
local ShowRule = { None = 0, EveryDayFirst = 1, EveryLogin = 2 }
local CommonActivity = T(Lib, "CommonActivity") ---@type CommonActivity
local CurrentActivityList = {}
local CommonActivityInfo = {
    isInit = false,
    setting = nil
}

function CommonActivity:init(setting)
    CommonActivityInfo.setting = setting
    initClientUI(setting)
    CurrentActivityList = {}
    Lib.subscribeEvent(Event.EventSyncCommonActivity, function(data)
        for _, item in pairs(data) do
            local activity = CommonActivityConfig:getActivityById(item.id)
            if activity then
                for key, value in pairs(item) do
                    activity[key] = value
                end
                self:addActivity(activity)
            end
        end
    end)

    Lib.subscribeEvent(Event.EventAddCommonActivity, function(data)
        local activity = CommonActivityConfig:getActivityById(data.id)
        if activity then
            for key, value in pairs(data) do
                activity[key] = value
            end
            self:addActivity(activity)
        end
    end)

    Lib.subscribeEvent(Event.EventRemoveCommonActivity, function(data)
        local activity = CommonActivityConfig:getActivityById(data.activityId)
        if activity then
            self:removeActivity(activity)
        end
    end)
end

function CommonActivity:addActivity(activity)
    table.insert(CurrentActivityList, activity)
    ---启动活动
    UI:getWnd("commonActivityLayout"):addActivity(activity)
    if CommonActivityInfo.isInit then
        return
    end
    CommonActivityInfo.isInit = true
    if CommonActivityInfo.setting.ShowRule == ShowRule.EveryLogin then
        UI:openWnd("commonActivityLayout")
    end
    if CommonActivityInfo.setting.ShowRule == ShowRule.EveryDayFirst then
        local day = Lib.getYearDayStr()
        local key = Game.GameName .. "-CommonActivityShowDay-" .. tostring(CGame.instance:getPlatformUserId())
        if Interface.getStringForKey(key) ~= day then
            Interface.putStringForKey(key, day)
            UI:openWnd("commonActivityLayout")
        end
    end
end

function CommonActivity:removeActivity(activity)
    Lib.tableRemove(CurrentActivityList, activity)
    ---关闭活动
    UI:getWnd("commonActivityLayout"):removeActivity(activity)
    Lib.emitEvent(Event.EventCommonActivityCheckRedPoint)
end

function CommonActivity:getCurrentActivityList()
    return CurrentActivityList
end

function CommonActivity:getCurrentActivityById(activityId)
    for _, activity in pairs(CurrentActivityList) do
        if activity.id == activityId then
            return activity
        end
    end
    return nil
end