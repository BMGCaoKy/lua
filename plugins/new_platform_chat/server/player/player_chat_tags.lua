---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hlm.
--- DateTime: 2021/5/21 11:02
---

--- @type Player
local Player = Player
local handles = T(Player, "PackageHandlers")
---@type TagsConfig
local TagsConfig = T(Config, "TagsConfig")
---@type TagsAutoConfig
local TagsAutoConfig = T(Config, "TagsAutoConfig")
local chatSetting = World.cfg.chatSetting or {}
---- 通知客户端更新我的标签
function Player:pushClientUpdateTags(labels)
    if not chatSetting.isOpenTagFunction then
        return
    end
    local packet = {
        pid = "PushClientUpdateTags",
        labels = labels or {},
    }
    self:sendPacket(packet)
end

-- 缓存web当前标签
function Player:updateCurWebTagsList(labels)
    self.curWebTagsList = {}
    for _, tagId in pairs(labels) do
        self.curWebTagsList[tonumber(tagId)] = true
    end
end

---- 玩家自己选择的标签，取消自动,设置为-1
function Player:updateConditionTagsCounts(tagsList)
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    for _, tagId in pairs(tagsList) do
        local item = TagsAutoConfig:getCfgByTagId(tagId)
        if  item then
            local conditionType = item.conditionType
            conditionAutoTagsCounts[conditionType] = -1
        end
    end
    self:setConditionAutoTagsCounts(conditionAutoTagsCounts)
end

---- 当前条件标签是否还能自动生成
function Player:isCanAutoConditionTags(conditionType)
    if not chatSetting.isOpenTagFunction then
        return false
    end
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    if conditionAutoTagsCounts[conditionType] == -1 then
        return false
    end
    return true
end

-- 玩家登陆的时候检测一次自动标签的获取
function Player:loginUpdateNewConditionTags()
    if not chatSetting.isOpenTagFunction then
        return false
    end
    for _, conditionType in pairs(Define.tagConditionType) do
        self:addConditionAutoCounts(conditionType,0)
    end
end

--- 增加条件标签次数
------ @param conditionType number
--- @param counts number
function Player:addConditionAutoCounts(conditionType, counts)
    if not self:isCanAutoConditionTags(conditionType) then
        return
    end
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    local num = conditionAutoTagsCounts[conditionType] or 0
    self:updateConditionAutoCounts(conditionType, num + counts)
end

--- 设置条件标签次数
------ @param conditionType number
--- @param counts number
function Player:updateConditionAutoCounts(conditionType, counts)
    if not self:isCanAutoConditionTags(conditionType) then
        return
    end
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    conditionAutoTagsCounts[conditionType] = counts
    self:setConditionAutoTagsCounts(conditionAutoTagsCounts)
    if not self.curWebTagsList then
        -- 先查询当前的标签数据
        AsyncProcess.GetOnePlayerTagData( self.platformUserId,function(data)
            if data then
                if not self or not self:isValid() then
                    return
                end
                self:updateCurWebTagsList(data.labels or {})
                self:doAutoTagsWithCondition(conditionType)
            end
        end)
    else
        self:doAutoTagsWithCondition(conditionType)
    end
end

--- 根据条件标签，更新标签
function Player:doAutoTagsWithCondition(conditionType)
    if not self:isCanAutoConditionTags(conditionType) then
        return
    end
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    local playTime = self:getThePlayGameMinTimes()
    local itemTag = TagsAutoConfig:getCompleteItemsByConditionType(conditionType, conditionAutoTagsCounts[conditionType], playTime)
    if itemTag then
        if self.curWebTagsList[itemTag.tagId] then
            return
        end
        local deleteList = {}
        for _, tagId in pairs(itemTag.exclusionList) do
            if self.curWebTagsList[tagId] then
                table.insert(deleteList, tagId)
                self.curWebTagsList[tagId] = false
            end
        end
        if #deleteList > 0 then
            self:requestWebDelBatchGameTag(deleteList)
        end
        if not self.curWebTagsList[itemTag.tagId] then
            self:requestWebAddBatchGameTag({ itemTag.tagId })
        end
    end
end

--- 更新条件标签次数
function handles:UpdateConditionAutoCounts(packet)
    self:updateConditionAutoCounts(packet.conditionType, packet.counts)
end

--- 请求平台批量添加标签
function Player:requestWebAddBatchGameTag(tagsList, isSelect)
    if not chatSetting.isOpenTagFunction then
        return
    end
    if #tagsList <= 0 then
        return
    end
    local curCounts = 0
    for _, tagState in pairs(self.curWebTagsList) do
        if tagState then
            curCounts = curCounts + 1
        end
    end
    if #tagsList + curCounts > chatSetting.chatTagSetting.selectTagMax then
        return
    end

    local bodyData = {}
    for _, tagId in pairs(tagsList) do
        local bodyItem = {
            label = tostring(tagId),
            relatedLabels = TagsConfig:getRelationItems(tagId),
            userId = tostring(self.platformUserId),
        }
        if not next(bodyItem.relatedLabels) then
            bodyItem.relatedLabels = nil
        end
        table.insert(bodyData, bodyItem)
    end

    AsyncProcess.AddBatchGameTag(bodyData,function(data)
        if data and #data > 0 then
            if not self or not self:isValid() then
                return
            end
            self:updateCurWebTagsList(data[#data].labels)
            self:pushClientUpdateTags(data[#data].labels)
            -- 玩家自己选择的标签，取消自动
            if isSelect then
                self:updateConditionTagsCounts(tagsList)
            end
        end
    end)
end

-- 批量添加标签
function handles:RequestAddTagsList(packet)
    self:requestWebAddBatchGameTag(packet.tagsList, packet.isSelect)
end

--- 请求平台批量删除标签
function Player:requestWebDelBatchGameTag(tagsList, isSelect)
    if not chatSetting.isOpenTagFunction then
        return
    end
    if #tagsList <= 0 then
        return
    end
    local bodyData = {}
    for _, tagId in pairs(tagsList) do
        local bodyItem = {
            label = tostring(tagId),
            userId = tostring(self.platformUserId),
        }
        table.insert(bodyData, bodyItem)
    end
    AsyncProcess.DelBatchGameTag(bodyData,function(data)
        if data and #data > 0 then
            if not self or not self:isValid() then
                return
            end
            self:updateCurWebTagsList(data[#data].labels)
            self:pushClientUpdateTags(data[#data].labels)
            -- 玩家自己选择的标签，取消自动
            if isSelect then
                self:updateConditionTagsCounts(tagsList)
            end
        end
    end)
end

-- 批量删除标签
function handles:RequestDeleteTagsList(packet)
    self:requestWebDelBatchGameTag(packet.tagsList, packet.isSelect)
end

---- 通知玩家游戏时长
function Player:pushThePlayGameTimes(time, userId)
    local packet = {
        pid = "PushThePlayGameTimes",
        time = time or 0,
        userId = userId
    }
    self:sendPacket(packet)
end

---- 请求平台玩家游戏时长
function Player:requestWebThePlayGameTimes(userId)
    if userId == self.platformUserId then
        if not self.totalPlayGameTime then
            self.totalPlayGameTime = 0
            self.getPlayGameTime = 0
        end
    end
    AsyncProcess.GetOneGamePlayTime(userId,function(data)
        if data then
            if not self or not self:isValid() then
                return
            end
            if userId == self.platformUserId then
                self.totalPlayGameTime = data[World.GameName]
                self.getPlayGameTime = os.time()
            end
            self:pushThePlayGameTimes(data[World.GameName], userId)
        end
    end)
end

---- 获取玩家游戏分钟时长
function Player:getThePlayGameMinTimes()
    if not self.totalPlayGameTime then
        return 0
    end
    local totalTime = self.totalPlayGameTime + os.time() - self.getPlayGameTime
    return math.ceil(totalTime/60)
end

-- 请求玩家游戏时长
function handles:RequestThePlayGameTimes(packet)
    self:requestWebThePlayGameTimes(packet.userId)
end

-- 请求玩家是否本游戏的玩家
function handles:RequestCheckOneIsGamePlayer(packet)
    local target = Game.GetPlayerByUserId(packet.userId)
    if target and target:isValid() then
        self:pushClientIsTheGamePlayer(packet.userId, true)
    else
        self:requestWebThePlayGameTimes(packet.userId, true)
    end
end

---- 通知玩家是否是本游戏的玩家
function Player:pushClientIsTheGamePlayer(userId, result)
    local packet = {
        pid = "PushClientIsTheGamePlayer",
        userId = userId,
        result = result
    }
    self:sendPacket(packet)
end