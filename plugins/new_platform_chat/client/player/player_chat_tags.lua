---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hlm.
--- DateTime: 2021/5/21 11:01
---
--- @type Player
local Player = Player
local handles = T(Player, "PackageHandlers")
local chatSetting = World.cfg.chatSetting
--- @type UIChatManage
local UIChatManage = T(UIMgr, "UIChatManage")
---@type TagsConfig
local TagsConfig = T(Config, "TagsConfig")

---- 客户端执行添加标签操作
function Player:operateAddPlayerTags(tagsList)
    -- 先查询是否可以添加标签
    AsyncProcess.GetPlayerListTagData({ Me.platformUserId },function(data)
        if data then
            for _, val in pairs(data) do
                if tonumber(val.userId) == Me.platformUserId then
                    local totalCounts = chatSetting.chatTagSetting.selectTagMax
                    if #val.labels + #tagsList <= totalCounts then
                        self:requestAddTagsList(tagsList)
                        return
                    end
                end
            end

            if not next(data) then
                local totalCounts = chatSetting.chatTagSetting.selectTagMax
                if #tagsList <= totalCounts then
                    self:requestAddTagsList(tagsList)
                    return
                end
            end
        end
    end)
end

---- 客户端执行删除标签操作
function Player:operateDeletePlayerTags(tagsList)
    -- 先查询是否可以删除标签
    AsyncProcess.GetPlayerListTagData({ Me.platformUserId },function(data)
        if data then
            for _, val in pairs(data) do
                if tonumber(val.userId) == Me.platformUserId then
                    local existTag = {}
                    for _, tagId in pairs(val.labels) do
                        existTag[tonumber(tagId)] = true
                    end

                    local canDelete = {}
                    for _, tagId in pairs(tagsList) do
                        if existTag[tonumber(tagId)] then
                            table.insert(canDelete, tagId)
                        end
                    end
                    self:requestDeleteTagsList(canDelete)
                end
            end
        end
    end)
end

---- 请求服务端添加标签
function Player:requestAddTagsList(tagsList, isSelect)
    local packet = {
        pid = "RequestAddTagsList",
        tagsList = tagsList,
        isSelect = isSelect
    }
    Me:sendPacket(packet)
end


---- 请求服务端删除标签
function Player:requestDeleteTagsList(tagsList, isSelect)
    local packet = {
        pid = "RequestDeleteTagsList",
        tagsList = tagsList,
        isSelect = isSelect
    }
    Me:sendPacket(packet)
end


--- 增加条件标签次数
------ @param conditionType number
--- @param counts number
function Player:addConditionAutoCounts(conditionType, counts)
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    if conditionAutoTagsCounts[conditionType] == -1 then
        return
    end
    local num = conditionAutoTagsCounts[conditionType] or 0
    self:updateConditionAutoCounts(conditionType, num + counts)
end

--- 设置条件标签次数
------ @param conditionType number
--- @param counts number
function Player:updateConditionAutoCounts(conditionType, counts)
    local conditionAutoTagsCounts = self:getConditionAutoTagsCounts()
    if conditionAutoTagsCounts[conditionType] == -1 then
        return
    end

    local packet = {
        pid = "UpdateConditionAutoCounts",
        conditionType = conditionType,
        counts = counts,
    }
    Me:sendPacket(packet)
end

---- 请求玩家游戏时长
function Player:requestThePlayGameTimes(userId)
    local packet = {
        pid = "RequestThePlayGameTimes",
        userId = userId
    }
    Me:sendPacket(packet)
end

---- 获取单个好友（玩家）信息
function Player:getOnePlayerDetailData(userId)
    AsyncProcess.GetOnePlayerDetailData(userId,function(data)
        if data then
            Lib.emitEvent(Event.EVENT_UPDATE_PLAYER_DETAIL_DATA, data, userId)
        end
    end)
end

---- 获取推荐好友列表
function Player:getRecommendFriendList(callFunc)
    AsyncProcess.RecommendFriend(function(dataList)
        local infoList = {}
        for k, data in pairs(dataList) do
            local item = Lib.copy(data)
            if data.birthday ~= "" then
                local birthDate = Lib.splitString(data.birthday,"-")
                local year = tonumber(birthDate[1])
                item.age = os.date("%Y", os.time()) - year
                local constellationId = Lib.calConstellationWithBirth(data.birthday)
                item.constellationName = Lang:toText("ui.chat.profile.constellationName" .. constellationId)
            else
                item.age = "None"
                item.constellationName = "None"
            end
            item.tagsData = {}
            item.tagTypeState = {}
            if data.labels then
                for _, tagId in pairs(data.labels) do
                    local tagCfg = TagsConfig:getItemByTagId(tonumber(tagId))
                    if tagCfg then
                        local temp = {
                            tagName = Lang:toText(tagCfg.name),
                            tagBg = chatSetting.chatTagSetting[tostring(tagCfg.tagType)].tagTypeRes
                        }
                        table.insert(item.tagsData, temp)
                        item.tagTypeState[tagCfg.tagType] = true
                    end
                end
            end
            item.index = k - 1
            table.insert(infoList, item)
        end
        callFunc(infoList)
    end)
end

---- 获取推荐好友和筛选好友,搜索玩家
function Player:operateSearchUser(searchTxt, callFunc)
    local dealInfoFunc = function(data)
        local item = Lib.copy(data)
        if data.birthday ~= "" then
            local birthDate = Lib.splitString(data.birthday,"-")
            local year = tonumber(birthDate[1])
            item.age = os.date("%Y", os.time()) - year
            local constellationId = Lib.calConstellationWithBirth(data.birthday)
            item.constellationName = Lang:toText("ui.chat.profile.constellationName" .. constellationId)
        else
            item.age = "None"
            item.constellationName = "None"
        end
        item.tagsData = {}
        item.tagTypeState = {}
        if data.labels then
            for _, tagId in pairs(data.labels) do
                local tagCfg = TagsConfig:getItemByTagId(tonumber(tagId))
                if tagCfg then
                    local temp = {
                        tagName = Lang:toText(tagCfg.name),
                        tagBg = chatSetting.chatTagSetting[tostring(tagCfg.tagType)].tagTypeRes
                    }
                    table.insert(item.tagsData, temp)
                    item.tagTypeState[tagCfg.tagType] = true
                end
            end
        end
        callFunc(item)
    end
    AsyncProcess.OperateSearchUser(searchTxt, function(data)
        if data then
            local detailData = Lib.copy(data)
            AsyncProcess.GetPlayerListTagData({ detailData.userId },function(playerData)
                if playerData then
                    for _, val in pairs(playerData) do
                        if tonumber(val.userId) == detailData.userId then
                            detailData.labels = val.labels
                            dealInfoFunc(detailData)
                        end
                    end
                end
            end)
        else
            callFunc()
        end
    end)
end

--- 标签推荐玩家，划掉某些用户
function Player:operateDisLikeUser(index)
    AsyncProcess.DisLikeUser(index)
end

-- 更新标签列表
function handles:PushClientUpdateTags(packet)
    Lib.emitEvent(Event.EVENT_UPDATE_PLAYER_TAG_DATA, packet.labels)
end
-- 更新玩家游戏时长
function handles:PushThePlayGameTimes(packet)
    self:updateOneIsTheGamePlayer(packet.userId, tonumber(packet.time) > 0)
    Lib.emitEvent(Event.EVENT_UPDATE_PLAYER_GAME_TIME, packet.time, packet.userId)
end

---- 好友名片查看的玩家是否是本游戏的玩家，有游戏时长,有缓存的直接返回，没缓存的查询服务端
function Player:checkOneIsTheGamePlayer(userId)
    if not self.curGamePlayerList then
        self.curGamePlayerList = {}
    end
    if self.curGamePlayerList[userId] then
        return true
    else
        local packet = {
            pid = "RequestCheckOneIsGamePlayer",
            userId = userId
        }
        Me:sendPacket(packet)
        return false
    end
end

---- 更新玩家是否是本游戏的玩家
function Player:updateOneIsTheGamePlayer(userId, result)
    if not self.curGamePlayerList then
        self.curGamePlayerList = {}
    end
    self.curGamePlayerList[userId] = result
    Lib.emitEvent(Event.EVENT_CHECK_ONE_IS_GAME_PLAYER)
end

-- 更新玩家是否本游戏的玩家
function handles:PushClientIsTheGamePlayer(packet)
    self:updateOneIsTheGamePlayer(packet.userId, packet.result)
end
