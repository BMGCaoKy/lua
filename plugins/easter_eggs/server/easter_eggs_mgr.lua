---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/3/15 11:25
---
--- @class EasterEggsMgr
local EasterEggsMgr = T(Lib, "EasterEggsMgr")
local EasterEgg = require "common.easter_eggs_obj"
local LuaTimer = T(Lib, "LuaTimer")

local roomGameConfig = Server.CurServer:getConfig()
local regionId = roomGameConfig:getRegionId()

---@type EasterEggsRefreshPosConfig
local EasterEggsRefreshPosConfig = T(Config, "EasterEggsRefreshPosConfig")

---@type EasterEggsConfig
local EasterEggsConfig = T(Config, "EasterEggsConfig")


local World = World ---@type World
local mapList = T(World, "mapList")

function EasterEggsMgr:init()

end

function EasterEggsMgr:isInEaster(player)
    local currTime = os.time()

    local easterEggData = player.easterEggData
    if not easterEggData then
        return
    end

    if currTime >= easterEggData.peakStart and currTime < easterEggData.peakEnd then
        return true
    end
    return false
end

function EasterEggsMgr:getCurEasterEggTime(player)
    local easterEggData = player.easterEggData
    if not easterEggData then
        return
    end

    local easterEggRefreshTime = easterEggData.refreshTime
    if not easterEggRefreshTime then
        return
    end

    local currTime = os.time()
    local curIndex = 0
    local count = #easterEggRefreshTime
    for i = count, 1, -1 do
        local time = easterEggRefreshTime[i]
        if currTime >= time then
            curIndex = i
            break
        end
    end

    return curIndex
end

function EasterEggsMgr:refreshEasterEggs(player, refreshIndex)
    local easterEggData = player.easterEggData
    if not easterEggData then
        --Lib.logDebug("11111111111111")
        return {code = false}
    end

    local easterEggRefreshTime = easterEggData.refreshTime
    if not easterEggRefreshTime then
        --Lib.logDebug("22222222222")
        return {code = false}
    end

    local index = self:getCurEasterEggTime(player)
    if refreshIndex ~= index then
        --Lib.logDebug("33333333333333333")
        return {code = false, index = index}
    end
    if easterEggRefreshTime[index] then
        local eggType = Define.EASTER_EGG_TYPE.Common
        if self:isInEaster(player) then
            eggType = Define.EASTER_EGG_TYPE.Advanced
        end


        local state = player:getEasterEggState()
        local oldCurConfig = state[index]
        if oldCurConfig and oldCurConfig.posList then
            return {code = true, randomPosList = oldCurConfig.posList, curIndex = index,}
        end
        local randomPosList = self:randomEggs(eggType)

        oldCurConfig = {posList = randomPosList, receiveIndex = {}}
        player:setEasterEggState({[index] = oldCurConfig})


        for mapType, posList in pairs(randomPosList) do
            for i, posConfig in pairs(posList) do
                GameReport:reportByUserId("bonus_refresh", {
                    game_type = World.GameName,
                    bonus_scene_id = posConfig.id,
                    match_id = mapType,
                    bonus_type = eggType,
                }, player.platformUserId)
            end
        end

        --Lib.logDebug("444444444444444444")
        return {code = true, randomPosList = randomPosList, curIndex = index,}
    else
        --Lib.logDebug("55555555555555")
        return {code = false, index = index}
    end
end


function EasterEggsMgr:randomEggsByMapType(randomEggsPosList, type, posList, eggType)
    local cfgSetting = World.cfg.easter_eggsSetting
    local productCount = cfgSetting.refreshNum

    local productData = {}
    if #posList <= productCount then
        for i = 1, #posList do
            table.insert(productData, i)
        end
    else
        local result = Lib.randomIntNoRepeat(1, #posList, productCount)
        for i = 1, #result do
            local key = result[i]
            if posList[key] then
                table.insert(productData, { id = posList[key].id, eggId = EasterEggsConfig:getRandomEgg(eggType) })
            end
        end
    end

    randomEggsPosList[type] = productData
end

--- 随机出来的蛋的位置
function EasterEggsMgr:randomEggs(eggType)
    local randomEggsPosList = {}
    local cfg = EasterEggsRefreshPosConfig:getAllCfg()

    for mapType, data in pairs(cfg) do
        self:randomEggsByMapType(randomEggsPosList, mapType, data, eggType)
    end

    return randomEggsPosList
end

function EasterEggsMgr:receiveEasterEggs(player, id, mapType)
    if player.isRequestReceiveEasterEgg then
        --Lib.logDebug("11111111111111111111111")
        return
    end

    local state = player:getEasterEggState()
    local curIndex = EasterEggsMgr:getCurEasterEggTime(player)

    local eggConfig = state[curIndex]
    if not eggConfig or not eggConfig.posList then
        player:sendPacket({
            pid = "onGetEasterEggIncomeFail",
            id = id,
            mapType = mapType,
        })
        --Lib.logDebug("222222222222222222")
        return
    end

    if eggConfig.receiveIndex[id] then
        player:sendPacket(
                {
                    pid = "showEasterEggsTips",
                    content = "ui.easter.cantget",
                }
        )

        player:sendPacket({
            pid = "onGetEasterEggIncomeFail",
            id = id,
            mapType = mapType,
        })
        --Lib.logDebug("333333333333333333")
        return
    end

    --Lib.logDebug("=======", Lib.v2s(eggConfig.posList, 6))
    --- 找到领取哪个蛋
    local posList = eggConfig.posList[mapType] or {}

    --Lib.logDebug("=======", Lib.v2s(posList, 6))
    --Lib.logDebug("=======", mapType, id)

    local eggId
    for i, posConfig in pairs(posList) do
        if id == posConfig.id then
            eggId = posConfig.eggId
            break
        end
    end
    if not eggId then
        player:sendPacket({
            pid = "onGetEasterEggIncomeFail",
            id = id,
            mapType = mapType,
        })
        --Lib.logDebug("444444444444444")
        return
    end

    local eggCfg = EasterEggsConfig:getCfgById(eggId)
    local income = eggCfg and tonumber(eggCfg.income[2]) or 0

    --- todo 上报

    local receiveNum = 0
    for i, v in pairs(eggConfig.receiveIndex) do
        receiveNum = receiveNum + 1
    end

    --[[
            该彩蛋所属的PGC游戏的id
            记录玩家领取的这个彩蛋的ID
            上报彩蛋属于高级彩蛋或低级彩蛋
            这是玩家找到的第几个彩蛋(本游戏中）
            这是玩家在该PGC游戏中找到的第几个彩蛋（所有活动中）
            当前游戏一共进行了多少秒
            本次游戏局刷新的彩蛋信息(共3个，罗列，逗号分割）
      ]]

    local posListStr = ""
    for i, posConfig in pairs(posList) do
        posListStr = posListStr .. "#" .. posConfig.id .. ":" .. posConfig.eggId
    end

    local userId = player.platformUserId
    player.isRequestReceiveEasterEgg = true
    AsyncProcess.addEasterScore(userId, income,
            function()
                if player and player:isValid() then
                    player.isRequestReceiveEasterEgg = nil
                    local playerState = player:getEasterEggState()
                    local playerEggConfig = playerState[curIndex]
                    playerEggConfig.receiveIndex[id] = true
                    Lib.logDebug("state == ", playerState)
                    player:setEasterEggState(playerState)

                    player:sendPacket(
                            {
                                pid = "showEasterEggsTips",
                                content = "ui.easter.geteggs",
                                params = {[1] = income}
                            }
                    )

                    player:sendPacket({
                        pid = "onGetEasterEggIncome",
                        income = income,
                        id = id,
                        mapType = mapType,
                    })

                end

                local loginTs = player.easter_egg_loginTs or 0 -- player:getLoginTs()
                local game_time = os.time() - loginTs

                --- todo 上报
                --- 领取成功数量 +1
                GameReport:reportByUserId("find_bonus", {
                    game_type = World.GameName,
                    bonus_scene_id = id,
                    bonus_type = eggCfg.eggType,
                    bonus_game_cnt = receiveNum + 1,
                    bonus_batch = curIndex,
                    game_time = game_time,
                    match_id = mapType,
                }, player.platformUserId)
            end,
            function(code)
                if player and player:isValid() then
                    player.isRequestReceiveEasterEgg = nil
                    if code == 8008 then

                        player:sendPacket(
                                {
                                    pid = "showEasterEggsTips",
                                    content = "ui.easter.upperlimit"
                                }
                        )
                    else
                        player:sendPacket(
                                {
                                    pid = "showEasterEggsTips",
                                    content = "ui.easter.getfailure"
                                }
                        )
                    end

                    player:sendPacket({
                        pid = "onGetEasterEggIncomeFail",
                        id = id,
                        mapType = mapType,
                        code = code,
                    })
                end
            end)
end

--- 检测蛋
function EasterEggsMgr:checkEasterEggState(player)
    local state = player:getEasterEggState()
    local cfg = EasterEggsRefreshPosConfig:getAllCfg()

    local eggType = Define.EASTER_EGG_TYPE.Common
    if self:isInEaster(player) then
        eggType = Define.EASTER_EGG_TYPE.Advanced
    end

    local eggList = EasterEggsConfig:getEggList(eggType)

    local needRandEggList = false

    for index, configData in pairs(state) do
        for mapType, list in pairs(configData.posList) do
            for i, eggConfig in pairs(list) do
                local posList = cfg[mapType]

                if eggConfig.id > #posList or eggConfig.eggId > #eggList then
                    needRandEggList = true
                    break
                end
            end
        end
    end

    if not needRandEggList then
        return
    end
    local index = self:getCurEasterEggTime(player)
    local easterEggData = player.easterEggData
    if not easterEggData then
        player:setEasterEggState({})
        return
    end

    local easterEggRefreshTime = easterEggData.refreshTime

    if easterEggRefreshTime[index] then
        local randomPosList = self:randomEggs(eggType)
        local oldCurConfig = {posList = randomPosList, receiveIndex = {}}
        player:setEasterEggState({[index] = oldCurConfig})
    end
end

EasterEggsMgr:init()
return EasterEggsMgr