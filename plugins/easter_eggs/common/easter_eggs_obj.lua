---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by qinjiancai.
--- DateTime: 2022/3/15 14:19
---
---@class EasterEgg
local EasterEgg = Lib.class("EasterEgg")
---@type EasterEggsRefreshPosConfig
local EasterEggsRefreshPosConfig = T(Config, "EasterEggsRefreshPosConfig")

---@type EasterEggsConfig
local EasterEggsConfig = T(Config, "EasterEggsConfig")

function EasterEgg:ctor(id, eggId, refreshTime)
    self.id = id

    ---@type EasterEggsConfigData
    local cfg = EasterEggsRefreshPosConfig:getCfgById(id)
    self.config = cfg

    Lib.logDebug("egg pos ",id, cfg.pos)

    self.eggId = eggId
    self.eggCfg = EasterEggsConfig:getCfgById(eggId)

    self.refreshTime = refreshTime

    --- 判断是否已領取
    self.received = false
    self.isRequestReceive = false
end

function EasterEgg:createEntity(map)
    if map.name == self.config.map then
        --Lib.logDebug("-------------- ", self.eggCfg, self.config)
        if not self.entity and self.eggCfg and self.config then
            Lib.logDebug("createEntity ", self.config.pos)
            local cfg = self.config
            local obj = EntityClient.CreateClientEntity({
                cfgName		= "myplugin/easter_egg",
                pos			= Lib.v3(cfg.pos[1],cfg.pos[2],cfg.pos[3]),
                ry 			= 0,
            })
            obj.easterEggObj = self
            obj:setProp("textHeight", self.eggCfg.textHeight or 2.3)
            obj:changeActor(self.eggCfg.actor)

            self.entity = obj

            self:checkShowEasterEggRefreshTime()
        end
    else
        if self.entity then
            self.entity:destroy()
            self.entity = nil
        end
    end
end

function EasterEgg:getEntityObj()
    return self.entity
end

function EasterEgg:checkShowEasterEggRefreshTime()
    if Me:checkEasterEggsIsReceive(self.id) then
        if self.entity and self.entity:isValid() then
            self.entity:showEasterEggRefreshTime(self.id, self.refreshTime)
        end
    else
        if self.entity and self.entity:isValid() then
            self.entity:hideEasterEggRefreshTime(self.id)
        end
    end
end

function EasterEgg:onInteract()
    if self.received then
        --player:sendPacket(
        --        {
        --            pid = "showEasterEggsTips",
        --            content = "ui.easter.cantget"
        --        }
        --)
        Lib.emitEvent(Event.EVENT_EASTER_EGGS_TIPS, Lang:formatMessageByIndex("ui.easter.cantget"))
        return
    end

    local income = self.eggCfg and tonumber(self.eggCfg.income[2]) or 0
    if income <= 0 then
        return
    end

    Me:sendPacket(
            {
                pid = "receiveEasterEggs",
                income = income,
                id = self.id,
                eggId = self.eggId,
                mapName = self.config.map,
                mapType = self.config.type
            }
    )
end

function EasterEgg:receiveSuccess()
    self.isRequestReceive = false

    if self.entity and self.entity:isValid() then
        self.entity:showEffect(
                {
                    isFixedPosition = true,
                    path = "",
                    effect = "ob37_easteregg_effects.effect",
                    pos = {
                        x = 0,
                        y = 0,
                        z = 0
                    },
                    yaw = 0,
                    time = 5000
                }
        )
    end
end

function EasterEgg:receiveFail()
    self.isRequestReceive = false
end

function EasterEgg:setReceived(flag)
    --Lib.logDebug("222222222 ", flag, debug.traceback(""))
    --Lib.logDebug(Lib.v2s(Me:getEasterEggState(), 8))
    self.received = flag
    self:checkShowEasterEggRefreshTime()
end

function EasterEgg:destroy()
    if self.entity and self.entity:isValid() then
        self.entity:destroy()
        self.entity = nil
    else
        self.entity = nil
    end
end

return EasterEgg