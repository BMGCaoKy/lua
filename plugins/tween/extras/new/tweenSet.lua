---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Anybook.
--- DateTime: 2022/5/12 15:46
---
local mt = {}
local tweenSet = {}

local manager = require "core.manager"
local propertyFunc = require "extras.new.propertyFunc"
local typeAdapter = require "extras.new.typeAdapter"

local eventInterface = {}

function mt:__index(key)
    if eventInterface[key] then
        return eventInterface[key]
    end
    local proFunc = propertyFunc[key]
    if proFunc and proFunc.get then
        return proFunc.get(self)
    end
    return rawget(self, key)
end

Event:InterfaceForTable(eventInterface, Define.EVENT_SPACE.TWEEN, Define.EVENT_POOL.DEFAULT)
Event:RegisterEvents({ "OnCompleted" }, Define.EVENT_SPACE.TWEEN)

function mt:__newindex(key, value)
    local proFunc = propertyFunc[key]
    if proFunc then
        if proFunc.set then
            proFunc.set(self, value)
        else
            perror(key, "property is read-only and cannot be assigned value.")
        end
    else
        rawset(self, key, value)
    end
end

local function updateTween(tween, tweenInfo)
    local playCount = tweenInfo.PlayCount
    if playCount > 1 then
        tween:setLoops(playCount, LoopType.Restart)
    end
    if tweenInfo.PlayMode == Enum.TweenPlayMode.Negative then
        tween:reverses()
        tween._tweenBase.status._elapsed = tweenInfo.Duration
    elseif tweenInfo.PlayMode == Enum.TweenPlayMode.Yoyo then
        playCount = (playCount ~= -1) and playCount * 2 or playCount
        tween:setLoops(playCount, LoopType.Yoyo)
    end
    tween:setEase(tweenInfo.EaseCurve.EaseType)
    tween:delay(tweenInfo.Delay)
end

local function createTweenIns(ins, tweenInfo, key, to)
    if not ins[key] then
        return nil
    end
    local params = table.pack(ins, key, to)
    local getter = typeAdapter:getter(params)
    local setter = typeAdapter:setter(params)
    to = typeAdapter:to(params)
    local tween = manager:createTweener(getter, setter, to, tweenInfo.Duration)
    if not tween then
        return nil
    end
    tween:setVerifyHandler(function()
        if ins.IsValid then
            return ins:IsValid()
        end
        return true
    end)
    tween:pause()
    tween:setAutoKill(false)
    updateTween(tween, tweenInfo)
    return tween
end

local function registerOnCompleted(self)
    local _, tween = next(self._tweens)
    if not tween then
        return
    end
    tween:onFinish(function()
        local be = self:GetEvent("OnCompleted")
        be:Emit()
    end)
end

function tweenSet:ctor(instance, tweenInfo, properties)
    self._isPlay = false
    self._isCancel = false
    self._isPause = false
    self._tweens = {}
    self._tweenInfo = Lib.copy(tweenInfo)
    if not instance then
        return
    end
    for key, to in pairs(properties) do
        self._tweens[key] = createTweenIns(instance, tweenInfo, key, to)
    end
    registerOnCompleted(self)
    self._ins = instance
end

local function filterTween(tweens, filter)
    for _, tween in pairs(tweens) do
        filter(tween)
    end
end

function tweenSet:Play()
    if not self._isPlay or self.PlayStatus == Enum.TweenPlayStatus.Cancelled or self.PlayStatus == Enum.TweenPlayStatus.Completed then
        filterTween(self._tweens, function(tween)
            tween:reset()
            updateTween(tween, self._tweenInfo)
        end)
        self._isPlay = true
        self._isCancel = false
    elseif self.PlayStatus == Enum.TweenPlayStatus.Paused then
        filterTween(self._tweens, function(tween)
            tween:continue()
        end)
    end
end

function tweenSet:Cancel()
    if self._isCancel then
        return
    end
    for _, tween in pairs(self._tweens) do
        tween:pause()
    end
    self._isCancel = true
end

function tweenSet:Pause()
    if self.PlayStatus == Enum.TweenPlayStatus.Completed or self.PlayStatus == Enum.TweenPlayStatus.Cancelled or self.PlayStatus == Enum.TweenPlayStatus.Paused then
        return
    end
    for _, tween in pairs(self._tweens) do
        tween:pause()
    end
end

return function(...)
    local tws = {}
    for k, v in pairs(tweenSet) do
        tws[k] = v
    end
    tweenSet.ctor(tws, ...)
    setmetatable(tws, mt)
    return tws
end