---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by bell.
--- DateTime: 2020/3/21 22:45
---
local isDebug = false --是否是调试模式
local logLevel = 1 --日志等级
local prefixMap = {
    [1] = "Debug",
    [2] = "Info",
    [3] = "Warning",
    [4] = "Error",
    [5] = "Fatal",
}

---@param level number
local function getPrefix(level)
    return prefixMap[level] or tostring(level)
end



---@param message string
---@param level number
function Lib.log(message, level, showDebugInfo)
    level = level or 1

    if not isDebug and level == 1 then
        return
    end

    if level < logLevel then
        return
    end

    if showDebugInfo then
        local debugInfo = debug.getinfo(4)
        local debugInfoStr = debugInfo.short_src .. " " .. debugInfo.currentline
        print(string.format("[%s] [%s] %s", getPrefix(level), debugInfoStr, message))
    else
        print(string.format("[%s] %s", getPrefix(level), message))
    end
end

function Lib.logImpl(level, showDebugInfo, ...)
    if level < logLevel then
        return
    end
    local message = {}
    for _, v in ipairs{...} do
        if type(v) == "table" then
            table.insert(message, Lib.v2s(v))
        else
            table.insert(message, tostring(v))
        end
    end
    Lib.log(table.concat(message, "\t"), level, showDebugInfo)
end
local curPrivateTag = ""
function Lib.logDebug(...)
    if not isDebug then
        return
    end
    if  curPrivateTag ~= "" then
        return
    end
    Lib.logImpl(1, true, ...)
end

function Lib.logDebugPrivate(privateTag,...)
    if not isDebug then
        return
    end
    if curPrivateTag == "" then
        Lib.logImpl(1, true,"["..privateTag.."]", ...)
    elseif privateTag == curPrivateTag then
        curPrivateTag = ""
        Lib.logImpl(1, true,"["..privateTag.."]", ...)
        curPrivateTag = privateTag
    end

end

function Lib.logInfo(...)
    if  curPrivateTag ~= "" then
        return
    end
    Lib.logImpl(2, nil, ...)
end

function Lib.logWarning(...)
    if  curPrivateTag ~= "" then
        return
    end
    Lib.logImpl(3, nil, ...)
end

function Lib.logError(...)
    if  curPrivateTag ~= "" then
        return
    end
    Lib.logImpl(4, nil, ...)
end

function Lib.logFatal(...)
    if  curPrivateTag ~= "" then
        return
    end
    Lib.logImpl(5, nil, ...)
end
---@param value string
function Lib.setDebugLogPrivate(value)
    curPrivateTag = value
end
---@param value boolean
function Lib.setDebugLog(value)
    isDebug = value
end

---@param level number
function Lib.setLogLevel(level)
    logLevel = level
end

---@param level number
---@param prefix string
function Lib.setLogPrefixMap(level, prefix)
    prefixMap[level] = prefix
end

--重写print 让打印的东西能同时写入到文件里
local old_print = print
print = function (...)
    if  curPrivateTag ~= "" then
        return
    end
    old_print(...)
end

if not IS_TESTCLIENT and PlatformUtil.isPlatformWindows() and false then
    local file = io.open("gameconfig.json")
    if not file then
        return
    end
    local content = file:read("*a")
    file:close()
    local cjson = require "cjson"
    local ok, data = pcall(cjson.decode, content)
    if not ok then
        return
    end
    if data.debug_log_private_tag then
        Lib.setDebugLogPrivate(data.debug_log_private_tag)
    end
end
