---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Anybook.
--- DateTime: 2022/6/28 16:34
---
local reportController = {
    lastTime = 0
}
local frequencyCache = {}

local validEventNameList = {}

local FREQUENCY = 60
local MINUTE2TICK = 60 * 20
local REQUEST_INTERVAL = 30 * 20

function reportController:receiveEventTrackingList(list)
    self.lastTime = World.Now()
    -- 接收埋点列表
    validEventNameList = {}
    for _, eventName in pairs(list) do
        validEventNameList[eventName] = true
    end
end

function reportController:getEventTrackingList()
    return validEventNameList
end

function reportController:tryRequestList()
    if (World.Now() - self.lastTime) > REQUEST_INTERVAL then
        self:requestEventTrackingList()
    end
end

function reportController:checkValidEventName(eventName)
    if os.getenv("startFromWorldEditor") then
        return true
    end
    -- 检查是否为可用的事件名
    return not not validEventNameList[eventName]
end

function reportController:checkExceedFrequency(userId)
    -- 检查上报频率
    local cache = frequencyCache[userId]
    if not cache then
        return false
    end
    if cache.timeout < World.Now() then
        return false
    end
    if cache.frequency < FREQUENCY then
        return false
    end
    if not cache.tip then
        Lib.logWarning("The number of times the user has reported data has reached the upper limit ! " .. userId, 3)
        cache.tip = true
    end
    return true
end

function reportController:signFrequency(userId)
    -- 标记单次上报频率
    local cache = frequencyCache[userId]
    local now = World.Now()
    if not cache then
        cache = { timeout = now + MINUTE2TICK, frequency = 0 }
        frequencyCache[userId] = cache
    end
    if cache.timeout < now then
        cache.timeout = now + MINUTE2TICK
        cache.frequency = 0
        cache.tip = false
    end
    cache.frequency = cache.frequency + 1
end

return reportController