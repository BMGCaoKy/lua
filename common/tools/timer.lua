---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Anybook.
--- DateTime: 2022/5/19 11:57
---
local Timer = class("Timer")

function Timer:ctor(delay, callback, ...)
    self.Delay = tonumber(delay) or 1
    self.Loop = false
    self._callback = callback
    self._args = table.pack(...)
end

function Timer:Execute()
    if not self._callback then
        return
    end
    local ok, ret = xpcall(self._callback, traceback, table.unpack(self._args, 1, self._args.n))
    if not ok then
        perror("Error call timer: ", ret)
    end
end

function Timer:Start()
    if self._delayStartTime then
        return
    end
    local delay = self.Delay
    if self._pause and self._remainTime then
        delay = self._remainTime
        self._pause = false
        self._remainTime = nil
    end
    self._delayStartTime = World.Now()
    self._cancelFunc = World.Timer(delay, function()
        self:Execute()
        local loopTime
        if self._delayStartTime and self.Loop and self.Delay then
            loopTime = self.Delay
            self._delayStartTime = World.Now()
        else
            self._delayStartTime = nil
        end
        return loopTime
    end)
end

function Timer:Stop()
    if self._cancelFunc then
        self._cancelFunc()
        self._cancelFunc = nil
    end
    self._delayStartTime = nil
    self._remainTime = nil
    self._pause = false
end

function Timer:Pause()
    if not self._delayStartTime then
        return
    end
    self._remainTime = self.Delay - (World.Now() - self._delayStartTime)
    if self._remainTime < 0 then
        self._remainTime = self.Delay
    end
    self._delayStartTime = nil
    if self._cancelFunc then
        self._cancelFunc()
        self._cancelFunc = nil
    end
    self._pause = true
end